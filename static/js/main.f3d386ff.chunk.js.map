{"version":3,"sources":["setting.tsx","pieces/piece.tsx","pieces/pawn.tsx","pieces/lance.tsx","pieces/knight.tsx","pieces/silver.tsx","pieces/gold.tsx","pieces/bishop.tsx","pieces/rook.tsx","pieces/king.tsx","pieces/mt.tsx","board.tsx","game.tsx","index.tsx"],"names":["Setting","LENGTH","UNCLICKED","WHITE","MT","PIECES","NUM","Piece","_out","_turn","_piece_num","this","Pawn","Lance","Knight","Silver","Gold","Bishop","Rook","King","Mt","Square","props","class_string","is_captured","is_black","is_final","is_clicked","can_control","className","onClick","value","Board","i","j","x","Math","floor","y","key","squares","out","turn","content","control_piece","push","renderSquare","final_piece","clicked_piece","items","Array","concat","React","Component","Captured","num","make_board","sfen","set_piece","n","piece","set_pieces","fill","set_control_piece","flag","control_pos_sub","control_pos","pos","kingx","kingy","check_king","piece_num","dx","dy","length","xx","yy","check","captured","def_controls","atc_controls","cnt","atc","atcx","atcy","abs","cur_pos","_","cloneDeep","can_move","nifu","mate","bfr_pos","Game","state","start_pos","start_black_piece","start_white_piece","current_pos","current_black_piece","current_white_piece","kifu","moves","moves_sub","black_name","white_name","tmp_pos","tmp_control_piece","setState","tmp_black_piece","tmp_white_piece","is_promoted","promote","window","confirm","setTimeout","alert","tmp_control_pos","game","handleClick","rotate","resign","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f3d386ff.chunk.js","sourcesContent":["export class Setting{\r\n  // 盤の列数（行数）\r\n  public static LENGTH: number = 9;\r\n  public static UNCLICKED: number = 81 + 14;\r\n  public static WHITE: number = 7;\r\n  public static MT: number = 16;\r\n  public static PIECES: string[] = [\"飛\", \"角\", \"金\", \"銀\", \"桂\", \"香\", \"歩\", \"玉\", \"竜\", \"馬\", \"\", \"全\", \"圭\", \"杏\", \"と\", \"\"];\r\n  public static NUM: string[] = [\"\", \"\", \"ニ\", \"三\", \"四\", \"五\", \"六\", \"七\", \"八\", \"九\", \"十\", \"十一\", \"十二\", \"十三\", \"十四\", \"十五\", \"十六\", \"十七\", \"十八\"];\r\n}\r\n","import { Setting } from \"../setting\";\r\n\r\nexport abstract class Piece{\r\n  // 出力する文字\r\n  private _out: string;\r\n  // 先手の駒か\r\n  private _turn: boolean;\r\n  // 駒番号\r\n  private _piece_num: number;\r\n\r\n  constructor(_out: string, _turn: boolean, _piece_num: number){\r\n    this._out = _out;\r\n    this._turn = _turn;\r\n    this._piece_num = _piece_num;\r\n  }\r\n\r\n  public out(): string{\r\n    return this._out;\r\n  }\r\n  public turn(): boolean{\r\n    return this._turn;\r\n  }\r\n  public piece_num(): number{\r\n    return this._piece_num;\r\n  }\r\n  public promote(): void{\r\n    this._piece_num += Setting.MT / 2;\r\n    this._out = Setting.PIECES[this._piece_num];\r\n  }\r\n\r\n}\r\n","import {Setting} from '../setting';\r\nimport {Piece} from './piece';\r\n\r\nexport class Pawn extends Piece{\r\n  constructor(_turn: boolean, _piece_num: number=6){\r\n    super(Setting.PIECES[_piece_num], _turn, _piece_num);\r\n  }\r\n}\r\n","import {Setting} from '../setting';\r\nimport {Piece} from './piece';\r\n\r\nexport class Lance extends Piece{\r\n  constructor(_turn: boolean, _piece_num: number=5){\r\n    super(Setting.PIECES[_piece_num], _turn, _piece_num);\r\n  }\r\n}\r\n","import {Setting} from '../setting';\r\nimport {Piece} from './piece';\r\n\r\nexport class Knight extends Piece{\r\n  constructor(_turn: boolean, _piece_num: number=4){\r\n    super(Setting.PIECES[_piece_num], _turn, _piece_num);\r\n  }\r\n}\r\n","import {Setting} from '../setting';\r\nimport {Piece} from './piece';\r\n\r\nexport class Silver extends Piece{\r\n  constructor(_turn: boolean, _piece_num: number=3){\r\n    super(Setting.PIECES[_piece_num], _turn, _piece_num);\r\n  }\r\n}\r\n","import {Setting} from '../setting';\r\nimport {Piece} from './piece';\r\n\r\nexport class Gold extends Piece{\r\n  constructor(_turn: boolean, _piece_num: number=2){\r\n    super(Setting.PIECES[_piece_num], _turn, _piece_num);\r\n  }\r\n}\r\n","import {Setting} from '../setting';\r\nimport {Piece} from './piece';\r\n\r\nexport class Bishop extends Piece{\r\n  constructor(_turn: boolean, _piece_num: number=1){\r\n    super(Setting.PIECES[_piece_num], _turn, _piece_num);\r\n  }\r\n}\r\n","import {Setting} from '../setting';\r\nimport {Piece} from './piece';\r\n\r\nexport class Rook extends Piece{\r\n  constructor(_turn: boolean, _piece_num: number=0){\r\n    super(Setting.PIECES[_piece_num], _turn, _piece_num);\r\n  }\r\n}\r\n","import {Setting} from '../setting';\r\nimport {Piece} from './piece';\r\n\r\nexport class King extends Piece{\r\n  constructor(_turn: boolean, _piece_num: number=7){\r\n    super(Setting.PIECES[_piece_num], _turn, _piece_num);\r\n  }\r\n}\r\n","import {Piece} from './piece';\r\n\r\nexport class Mt extends Piece{\r\n  constructor(_turn: boolean=true, _piece_num: number=16){\r\n    super(' ', _turn, _piece_num);\r\n  }\r\n}\r\n","import React from 'react';\r\n// import ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport {Setting} from \"./setting\";\r\nimport {Piece} from './pieces/piece';\r\n// import { Pawn } from \"./pieces/pawn\";\r\n// import { Mt } from \"./pieces/mt\";\r\n// import {Game} from './game';\r\n\r\ninterface ISquareProps{\r\n  is_final: boolean;\r\n  is_clicked: boolean;\r\n  value: string;\r\n  is_black: boolean;\r\n  is_captured: boolean;\r\n  can_control: boolean;\r\n  onClick: () => void;\r\n}\r\n\r\nfunction Square(props: ISquareProps){\r\n  let class_string: string = \"\";\r\n  if(props.is_captured){\r\n    class_string = \"captured\";\r\n  }\r\n  else{\r\n    class_string = \"square piece\";\r\n    if(!props.is_black){\r\n      class_string = class_string + \" white\";\r\n    }\r\n  }\r\n  if(props.is_final){\r\n    class_string = class_string + \" final\";\r\n  }\r\n  if(props.is_clicked){\r\n    class_string = class_string + \" click\";\r\n  }\r\n  if(props.can_control){\r\n    class_string = class_string + \" attack\";\r\n  }\r\n  return (\r\n    <button\r\n      className={class_string}\r\n      onClick={props.onClick}\r\n    >\r\n      {props.value}\r\n    </button>\r\n  );\r\n}\r\n\r\ninterface IBoardProps {\r\n  squares: Piece[][];\r\n  onClick: (i: number) => void;\r\n  clicked_piece: number;\r\n  control_piece: boolean[][];\r\n  final_piece: number;\r\n}\r\n\r\ninterface IBoardState {\r\n  squares: Piece[][];\r\n  onClick: (i: number) => void;\r\n  clicked_piece: number;\r\n  control_piece: boolean[][];\r\n  final_piece: number;\r\n}\r\n\r\nexport class Board extends React.Component<IBoardProps, IBoardState> {\r\n\r\n  renderSquare(is_final: boolean, is_clicked: boolean, can_control: boolean, i: number) {\r\n    let j = i - Setting.WHITE * 2;\r\n    let x: number = Math.floor(j / Setting.LENGTH);\r\n    let y: number = j % Setting.LENGTH;\r\n    return (\r\n      <Square\r\n        key={i}\r\n        is_final={is_final}\r\n        is_clicked={is_clicked}\r\n        value={this.props.squares[x][y].out()}\r\n        is_black={this.props.squares[x][y].turn()}\r\n        is_captured={false}\r\n        can_control={can_control}\r\n        onClick={() => this.props.onClick(i)}\r\n      />\r\n    );\r\n  }\r\n\r\n  content(y: number){\r\n    let content = [];\r\n    for(let x = Setting.LENGTH - 1; x >= 0; --x){\r\n      if(this.props.control_piece[x][y]){\r\n        content.push(this.renderSquare(false, false, true, x * Setting.LENGTH + y + Setting.WHITE * 2));\r\n      }\r\n      else if(x * Setting.LENGTH + y === this.props.final_piece - Setting.WHITE * 2){\r\n        content.push(this.renderSquare(true, false, false, x * Setting.LENGTH + y + Setting.WHITE * 2));\r\n      }\r\n      else if(x * Setting.LENGTH + y === this.props.clicked_piece - Setting.WHITE * 2){\r\n        content.push(this.renderSquare(false, true, false, x * Setting.LENGTH + y + Setting.WHITE * 2));\r\n      }\r\n      else{\r\n        content.push(this.renderSquare(false, false, false, x * Setting.LENGTH + y + Setting.WHITE * 2));\r\n      }\r\n    }\r\n    return content;\r\n  }\r\n\r\n  render() {\r\n    let items = new Array<JSX.Element>();\r\n    for(let y = 0; y < Setting.LENGTH; ++y){\r\n      items = items.concat(<div className=\"board-row ley\" key={y}>{this.content(y)}</div>);\r\n    }\r\n\r\n    return (\r\n      <div>\r\n        {/* <div className=\"status\">{status}</div> */}\r\n        {items}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\ninterface ICapturedProps {\r\n  squares: number[];\r\n  clicked_piece: number;\r\n  is_black: boolean;\r\n  turn: boolean;\r\n  onClick: (i: number) => void;\r\n}\r\n\r\ninterface ICapturedState {\r\n  squares: number[];\r\n  clicked_piece: number;\r\n  is_black: boolean;\r\n  turn: boolean;\r\n  onClick: (i: number) => void;\r\n}\r\n\r\nexport class Captured extends React.Component<ICapturedProps, ICapturedState> {\r\n\r\n  renderSquare(is_clicked: boolean, i: number) {\r\n    return (\r\n      <Square\r\n        key={i}\r\n        is_final={false}\r\n        is_clicked={is_clicked}\r\n        value={Setting.PIECES[i]}\r\n        is_black={this.props.is_black}\r\n        is_captured={true}\r\n        can_control={false}\r\n        onClick={(this.props.is_black ? () => this.props.onClick(i) : () => this.props.onClick(i + Setting.WHITE))}\r\n      />\r\n    );\r\n  }\r\n\r\n  render() {\r\n    let items = new Array<JSX.Element>();\r\n    const clicked_piece: number = (this.props.turn ? this.props.clicked_piece : this.props.clicked_piece - Setting.WHITE);\r\n    const is_black: boolean = this.props.is_black;\r\n    const turn: boolean = this.props.turn;\r\n    for(let i = 0; i < Setting.WHITE; ++i){\r\n      let num = this.props.squares[i];\r\n      if(num > 0){\r\n        if(i === clicked_piece && is_black === turn){\r\n          items = items.concat(<div className=\"board-row ley\" key={i}>{this.renderSquare(true, i)}</div>);\r\n        }\r\n        else{\r\n          items = items.concat(<div className=\"board-row ley\" key={i}>{this.renderSquare(false, i)}</div>);\r\n        }\r\n        if(num > 1){\r\n          items = items.concat(<div className=\"board-row ley\" key={\"num\"+i}>{\r\n            <button\r\n              className={\"number\"}\r\n            >\r\n            {Setting.NUM[num]}\r\n            </button>\r\n          }</div>);\r\n        }\r\n      }\r\n    }\r\n\r\n    return (\r\n      <div>\r\n        {items}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\r\n// import ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport {Setting} from \"./setting\";\r\nimport {Piece} from './pieces/piece';\r\nimport { Pawn } from \"./pieces/pawn\";\r\nimport { Lance } from \"./pieces/lance\";\r\nimport { Knight } from \"./pieces/knight\";\r\nimport { Silver } from \"./pieces/silver\";\r\nimport { Gold } from \"./pieces/gold\";\r\nimport { Bishop } from \"./pieces/bishop\";\r\nimport { Rook } from \"./pieces/rook\";\r\nimport { King } from \"./pieces/king\";\r\nimport { Mt } from \"./pieces/mt\";\r\nimport {Board, Captured} from './board';\r\nimport _ from 'lodash';\r\n\r\nexport function make_board(sfen=\"lnsgkgsnl/1r5b1/ppppppppp/9/9/9/PPPPPPPPP/1B5R1/LNSGKGSNL b - 1\", language='Ja'): Piece[][]{\r\n  let squares: Piece[][] = [];\r\n  for(let i = 0; i < Setting.LENGTH; ++i){\r\n    squares[i] = [];\r\n    for(let j = 0; j < Setting.LENGTH; ++j){\r\n      squares[i].push(new Mt());\r\n    }\r\n  }\r\n  if(sfen === \"lnsgkgsnl/1r5b1/ppppppppp/9/9/9/PPPPPPPPP/1B5R1/LNSGKGSNL b - 1\"){\r\n    for(let i = 0; i < Setting.LENGTH; ++i){\r\n      squares[i][2] = new Pawn(false);\r\n      squares[i][6] = new Pawn(true);\r\n    }\r\n    squares[0][0] = new Lance(false);\r\n    squares[8][0] = new Lance(false);\r\n    squares[0][8] = new Lance(true);\r\n    squares[8][8] = new Lance(true);\r\n\r\n    squares[1][0] = new Knight(false);\r\n    squares[7][0] = new Knight(false);\r\n    squares[1][8] = new Knight(true);\r\n    squares[7][8] = new Knight(true);\r\n\r\n    squares[2][0] = new Silver(false);\r\n    squares[6][0] = new Silver(false);\r\n    squares[2][8] = new Silver(true);\r\n    squares[6][8] = new Silver(true);\r\n\r\n    squares[3][0] = new Gold(false);\r\n    squares[5][0] = new Gold(false);\r\n    squares[3][8] = new Gold(true);\r\n    squares[5][8] = new Gold(true);\r\n\r\n    squares[1][1] = new Bishop(false);\r\n    squares[7][7] = new Bishop(true);\r\n\r\n    squares[7][1] = new Rook(false);\r\n    squares[1][7] = new Rook(true);\r\n\r\n    squares[4][0] = new King(false);\r\n    squares[4][8] = new King(true);\r\n  }\r\n  else{\r\n\r\n  }\r\n  return squares;\r\n}\r\n\r\nexport function set_piece(n: number, is_black: boolean): Piece{\r\n  let piece: Piece = new Mt();\r\n  if(n === 0) piece = new Rook(is_black);\r\n  if(n === 1) piece = new Bishop(is_black);\r\n  if(n === 2) piece = new Gold(is_black);\r\n  if(n === 3) piece = new Silver(is_black);\r\n  if(n === 4) piece = new Knight(is_black);\r\n  if(n === 5) piece = new Lance(is_black);\r\n  if(n === 6) piece = new Pawn(is_black);\r\n  return piece;\r\n}\r\n\r\nexport function set_pieces(): number[]{\r\n  let numbers: number[] = new Array<number>(Setting.WHITE).fill(0);\r\n  return numbers;\r\n}\r\n\r\nexport function set_kifu(): Array<string>{\r\n  let kifu: Array<string> = [];\r\n  return kifu;\r\n}\r\n\r\nexport function set_control_piece(flag: boolean = false): boolean[][]{\r\n  let control_piece: boolean[][] = [];\r\n  for(let i = 0; i < Setting.LENGTH; ++i){\r\n    control_piece[i] = new Array<boolean>(Setting.LENGTH).fill(flag);\r\n  }\r\n  return control_piece;\r\n}\r\n\r\n// ある駒の利きを列挙\r\n// 手番の駒のマスは移動するときにはじいているため、ここではそのマスも利きに入れてしまう\r\n// ただし飛び道具はすり抜けしないために正しい効きを列挙する\r\nfunction control_pos_sub(control_pos: number[][], pos: Piece[][], turn: boolean, x: number, y: number, kingx: number = -1, kingy: number = -1, check_king: boolean = true): void{\r\n  let num: number = pos[x][y].piece_num();\r\n  // 歩\r\n  if(num === 6){\r\n    if(turn ? y !== 0 : y !== Setting.LENGTH - 1){\r\n      let yy = (turn ? y - 1 : y + 1);\r\n      ++control_pos[x][yy];\r\n      // 王手をしているか\r\n      if(x === kingx && yy === kingy){\r\n        control_pos[Setting.LENGTH][0] = x * Setting.LENGTH + y;\r\n        control_pos[Setting.LENGTH][1] = num;\r\n      }\r\n    }\r\n    return;\r\n  }\r\n  if(num === 2 || num === 3 || num === 4 || num === 7 || (11 <= num && num <= 14)){\r\n    let dx: number[];\r\n    let dy: number[];\r\n    // 桂\r\n    if(num === 4){\r\n      dx = new Array<number>(-1, 1);\r\n      dy = new Array<number>(-2, -2);\r\n    }\r\n    // 銀\r\n    else if(num === 3){\r\n      dx = new Array<number>(-1, 0, 1, 1, -1);\r\n      dy = new Array<number>(-1, -1, -1, 1, 1);\r\n    }\r\n    // 金、と、杏、圭、全\r\n    else if(num === 2 || (11 <= num && num <= 14)){\r\n      dx = new Array<number>(-1, 0, 1, 1, 0, -1);\r\n      dy = new Array<number>(-1, -1, -1, 0, 1, 0);\r\n    }\r\n    // 玉\r\n    else{\r\n      if(check_king){\r\n        dx = new Array<number>(-1, 0, 1, 1, 1, 0, -1, -1);\r\n        dy = new Array<number>(-1, -1, -1, 0, 1, 1, 1, 0);\r\n      }\r\n      else{\r\n        dx = new Array<number>(0);\r\n        dy = new Array<number>(0);\r\n      }\r\n    }\r\n    for(let i = 0; i< dx.length; ++i){\r\n      let xx = (turn ? x + dx[i] : x - dx[i]);\r\n      let yy = (turn ? y + dy[i] : y - dy[i]);\r\n      if(0 <= xx && xx < Setting.LENGTH && 0 <= yy && yy < Setting.LENGTH){\r\n        ++control_pos[xx][yy];\r\n        // 王手をしているか\r\n        if(xx === kingx && yy === kingy){\r\n          control_pos[Setting.LENGTH][0] = x * Setting.LENGTH + y;\r\n          control_pos[Setting.LENGTH][1] = num;\r\n        }\r\n      }\r\n    }\r\n    return;\r\n  }\r\n  // 香\r\n  if(num === 5){\r\n    let dy: number = -1;\r\n    let yy = (turn ? y + dy : y - dy);\r\n    while(0 <= yy && yy < Setting.LENGTH){\r\n      ++control_pos[x][yy];\r\n      // 王手をしているか\r\n      if(x === kingx && yy === kingy){\r\n        control_pos[Setting.LENGTH][0] = x * Setting.LENGTH + y;\r\n        control_pos[Setting.LENGTH][1] = num;\r\n      }\r\n      // 空きマスでなければ終わり\r\n      // ただし相手玉なら終わらない\r\n      if(pos[x][yy].piece_num() !== Setting.MT && !(pos[x][yy].piece_num() === 7 && pos[x][yy].turn() !== turn)){\r\n        break;\r\n      }\r\n      yy = (turn ? yy + dy : yy - dy);\r\n    }\r\n    return;\r\n  }\r\n  // 飛と角は手番で動きが変わらない！（対称）\r\n  // 角\r\n  if(num === 1 || num === 9){\r\n    let dx: number[] = new Array<number>(-1, 1, 1, -1);\r\n    let dy: number[] = new Array<number>(-1, -1, 1, 1);\r\n    for(let i = 0; i < dx.length; ++i){\r\n      let xx = x + dx[i];\r\n      let yy = y + dy[i];\r\n      while(0 <= xx && xx < Setting.LENGTH && 0 <= yy && yy < Setting.LENGTH){\r\n        ++control_pos[xx][yy];\r\n        // 王手をしているか\r\n        if(xx === kingx && yy === kingy){\r\n          control_pos[Setting.LENGTH][0] = x * Setting.LENGTH + y;\r\n          control_pos[Setting.LENGTH][1] = num;\r\n        }\r\n        // 空きマスでなければ終わり\r\n        // ただし相手玉なら終わらない\r\n        if(pos[xx][yy].piece_num() !== Setting.MT && !(pos[xx][yy].piece_num() === 7 && pos[xx][yy].turn() !== turn)){\r\n          break;\r\n        }\r\n        xx += dx[i];\r\n        yy += dy[i];\r\n      }\r\n    }\r\n    // 馬の場合は上下左右も\r\n    if(num === 9){\r\n      dx = new Array<number>(0, 1, 0, -1);\r\n      dy = new Array<number>(-1, 0, 1, 0);\r\n      for(let i = 0; i< dx.length; ++i){\r\n        let xx = x + dx[i];\r\n        let yy = y + dy[i];\r\n        if(0 <= xx && xx < Setting.LENGTH && 0 <= yy && yy < Setting.LENGTH){\r\n          ++control_pos[xx][yy];\r\n          // 王手をしているか\r\n          if(xx === kingx && yy === kingy){\r\n            control_pos[Setting.LENGTH][0] = x * Setting.LENGTH + y;\r\n            control_pos[Setting.LENGTH][1] = num;\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return;\r\n  }\r\n  // 飛\r\n  if(num === 0 || num === 8){\r\n    let dx: number[] = new Array<number>(0, 1, 0, -1);\r\n    let dy: number[] = new Array<number>(-1, 0, 1, 0);\r\n    for(let i = 0; i < dx.length; ++i){\r\n      let xx = x + dx[i];\r\n      let yy = y + dy[i];\r\n      while(0 <= xx && xx < Setting.LENGTH && 0 <= yy && yy < Setting.LENGTH){\r\n        ++control_pos[xx][yy];\r\n        // 王手をしているか\r\n        if(xx === kingx && yy === kingy){\r\n          control_pos[Setting.LENGTH][0] = x * Setting.LENGTH + y;\r\n          control_pos[Setting.LENGTH][1] = num;\r\n        }\r\n        // 空きマスでなければ終わり\r\n        // ただし相手玉なら終わらない\r\n        if(pos[xx][yy].piece_num() !== Setting.MT && !(pos[xx][yy].piece_num() === 7 && pos[xx][yy].turn() !== turn)){\r\n          break;\r\n        }\r\n        xx += dx[i];\r\n        yy += dy[i];\r\n      }\r\n    }\r\n    // 竜の場合は斜めも\r\n    if(num === 8){\r\n      dx = new Array<number>(-1, 1, 1, -1);\r\n      dy = new Array<number>(-1, -1, 1, 1);\r\n      for(let i = 0; i< dx.length; ++i){\r\n        let xx = x + dx[i];\r\n        let yy = y + dy[i];\r\n        if(0 <= xx && xx < Setting.LENGTH && 0 <= yy && yy < Setting.LENGTH){\r\n          ++control_pos[xx][yy];\r\n          // 王手をしているか\r\n          if(xx === kingx && yy === kingy){\r\n            control_pos[Setting.LENGTH][0] = x * Setting.LENGTH + y;\r\n            control_pos[Setting.LENGTH][1] = num;\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return;\r\n  }\r\n}\r\n\r\n// 駒の利きを列挙\r\n// 一つの駒を指定することもできる\r\n// ついでに王手をかけている駒の位置も返す\r\nfunction control_pos(pos: Piece[][], turn: boolean, x: number = -1, y: number = -1, kingx: number = -1, kingy: number = -1, check_king: boolean = true): number[][]{\r\n  let control_pos: number[][] = [];\r\n  for(let i = 0; i < Setting.LENGTH + 1; ++i){\r\n    control_pos[i] = new Array<number>(Setting.LENGTH).fill(0);\r\n  }\r\n  if(x !== -1){\r\n    control_pos_sub(control_pos, pos, turn, x, y);\r\n    return control_pos;\r\n  }\r\n  for(let i = 0; i < Setting.LENGTH; ++i){\r\n    for(let j = 0; j < Setting.LENGTH; ++j){\r\n      if(pos[i][j].piece_num() !== Setting.MT && pos[i][j].turn() === turn){\r\n        control_pos_sub(control_pos, pos, turn, i, j, kingx, kingy, check_king);\r\n      }\r\n    }\r\n  }\r\n  return control_pos;\r\n}\r\n\r\n// 王手がかかっているか\r\n// 返り値：（1桁目：王手をかけている駒の数、2桁目：そのうち防げる駒の数）\r\nfunction check(pos: Piece[][], captured: number[], turn: boolean, x: number = -1, y : number = -1): number{\r\n  // 玉の位置\r\n  if(x === -1){\r\n    for(let i = 0; i < Setting.LENGTH; ++i){\r\n      for(let j = 0; j < Setting.LENGTH; ++j){\r\n        if(pos[i][j].piece_num() === 7 && pos[i][j].turn() === turn){\r\n          x = i;\r\n          y = j;\r\n          i = Setting.LENGTH;\r\n          j = Setting.LENGTH;\r\n          break;\r\n        }\r\n      }\r\n    }\r\n  }\r\n  // 効いているマスをあらかじめ求めておく\r\n  let def_controls: number[][] = control_pos(pos, turn, -1, -1, -1, -1, false);\r\n  let atc_controls: number[][] = control_pos(pos, !turn, -1, -1, x, y);\r\n  // 王手をかけている駒の数\r\n  let cnt: number = atc_controls[x][y];\r\n  if(cnt === 0){\r\n    return 0;\r\n  }\r\n  // 2つ以上の駒が王手をかけているなら逃げるしかないのでreturn\r\n  if(cnt > 1){\r\n    return cnt * 10;\r\n  }\r\n  // 王手をかけている駒を（玉以外で）取れるか\r\n  // 玉で取れる場合はここではチェックしなくてよい\r\n  let atc: number = atc_controls[Setting.LENGTH][0];\r\n  let atcx: number = Math.floor(atc / Setting.LENGTH);\r\n  let atcy: number = atc % Setting.LENGTH;\r\n  // 桂馬以外の飛び道具で王手されているとき合い駒できるか\r\n  let num: number = atc_controls[Setting.LENGTH][1];\r\n  if(num === 0 || num === 1 || num === 5 || num === 8 || num === 9){\r\n    let dx: number = atcx - x;\r\n    let dy: number = atcy - y;\r\n    if(dx !== 0){\r\n      dx /= Math.abs(dx);\r\n    }\r\n    if(dy !== 0){\r\n      dy /= Math.abs(dy);\r\n    }\r\n    let xx: number = x + dx;\r\n    let yy: number = y + dy;\r\n    while(xx !== atcx || yy !== atcy){\r\n      // 移動合いできるか\r\n      if(def_controls[xx][yy] > 0){\r\n        return 11;\r\n      }\r\n      // 持ち駒で合い駒できるか\r\n      for(let i = 0; i < Setting.WHITE; ++i){\r\n        if(captured[i] === 0){\r\n          continue;\r\n        }\r\n        let cur_pos: Piece[][] = _.cloneDeep(pos);\r\n        cur_pos[xx][yy] = set_piece(i, turn);\r\n        if(can_move(pos, cur_pos, captured, -1, -1, x, yy, !turn)){\r\n          // 二歩かどうかはチェックする必要がある\r\n          if(i === 6 && nifu(cur_pos, xx, turn)){\r\n            continue;\r\n          }\r\n          return 11;\r\n        }\r\n      }\r\n      xx += dx;\r\n      yy += dy;\r\n    }\r\n  }\r\n\r\n  return 10;\r\n}\r\n\r\n// 詰んでいるか\r\nfunction mate(pos: Piece[][], captured: number[], turn: boolean): boolean{\r\n  // 玉の位置\r\n  let x: number = -1;\r\n  let y: number = -1;\r\n  for(let i = 0; i < Setting.LENGTH; ++i){\r\n    for(let j = 0; j < Setting.LENGTH; ++j){\r\n      if(pos[i][j].piece_num() === 7 && pos[i][j].turn() === turn){\r\n        x = i;\r\n        y = j;\r\n        i = Setting.LENGTH;\r\n        j = Setting.LENGTH;\r\n        break;\r\n      }\r\n    }\r\n  }\r\n  // 王手をかけている駒の数\r\n  let cnt: number = check(pos, captured, turn, x, y);\r\n  // 王手されていなければ明らかに詰んでいない\r\n  if(cnt === 0){\r\n    return false;\r\n  }\r\n  // 今いるマス及び周りのマスで王手がかかるか\r\n  let atc_controls: number[][] = control_pos(pos, !turn);\r\n  let dx: number[] = new Array<number>(1, 1, 0, -1, -1, -1, 0, 1);\r\n  let dy: number[] = new Array<number>(0, 1, 1, 1, 0, -1, -1, -1);\r\n  for(let i = 0; i < dx.length; ++i){\r\n    let xx = x + dx[i];\r\n    let yy = y + dy[i];\r\n    if(xx < 0 || Setting.LENGTH <= xx || yy < 0 || Setting.LENGTH <= yy){\r\n      continue;\r\n    }\r\n    // 自分の駒があるとダメ\r\n    if(pos[xx][yy].piece_num() !== Setting.MT && pos[xx][yy].turn() === turn){\r\n      continue;\r\n    }\r\n    // 逃げられるマスがあれば詰んでいない\r\n    if(atc_controls[xx][yy] === 0){\r\n      return false;\r\n    }\r\n  }\r\n  // 2つ以上の駒から王手されている場合は明らかにダメ\r\n  if(Math.floor(cnt / 10) > 1){\r\n    return true;\r\n  }\r\n  // 防げる王手か\r\n  return cnt % 10 < 1;\r\n}\r\n\r\n// 動けるマスか\r\n// 動かす前の盤面、動かした後の盤面、移動前の位置、移動後の位置、手番\r\nfunction can_move(bfr_pos: Piece[][], cur_pos: Piece[][], captured: number[], xx: number, yy: number, x: number, y: number, turn: boolean): boolean{\r\n  let num: number = cur_pos[x][y].piece_num();\r\n  // 駒を打つときは行き所がないかと、打ち歩詰めのみをチェックすればよい\r\n  // 二歩のチェックはここではせずに反則負けにする\r\n  if(xx === -1){\r\n    if(num === 4){\r\n      return (turn ? y > 1 : y < Setting.LENGTH - 1 - 1);\r\n    }\r\n    if(num === 5){\r\n      return (turn ? y !== 0 : y !== Setting.LENGTH - 1);\r\n    }\r\n    if(num === 6){\r\n      if((turn ? y === 0 : y === Setting.LENGTH - 1)){\r\n        return false;\r\n      }\r\n      // 打ち歩詰めかどうか\r\n      return !mate(cur_pos, captured, !turn);\r\n    }\r\n    return true;\r\n  }\r\n  // ルール通りの動きか調べる\r\n  // 香、角、飛は駒をすり抜けに注意\r\n  let controls: number[][] = control_pos(bfr_pos, turn, xx, yy);\r\n  return controls[x][y] > 0;\r\n}\r\n\r\n// 二歩かどうか\r\n// 打った筋だけ見ればよい\r\nfunction nifu(pos: Piece[][], x: number, turn: boolean): boolean{\r\n  let cnt = 0;\r\n  for(let i = 0; i < Setting.LENGTH; ++i){\r\n    if(pos[x][i].piece_num() === 6 && pos[x][i].turn() === turn){\r\n      ++cnt;\r\n    }\r\n  }\r\n  return cnt >= 2;\r\n}\r\n\r\ninterface IGameProps {\r\n  start_pos: Piece[][];\r\n  start_black_piece: number[];\r\n  start_white_piece: number[];\r\n  current_pos: Piece[][];\r\n  current_black_piece: number[];\r\n  current_white_piece: number[];\r\n  control_piece: boolean[][];\r\n  kifu: Array<string>;\r\n  turn: boolean;\r\n  moves: number;\r\n  moves_sub: number;\r\n  clicked_piece: number;\r\n  final_piece: number;\r\n  black_name: string;\r\n  white_name: string;\r\n  is_black: boolean;\r\n}\r\n\r\ninterface IGameState {\r\n  // 開始局面\r\n  start_pos: Piece[][];\r\n  start_black_piece: number[];\r\n  start_white_piece: number[];\r\n  // 現局面\r\n  current_pos: Piece[][];\r\n  current_black_piece: number[];\r\n  current_white_piece: number[];\r\n  // 指し手の候補\r\n  control_piece: boolean[][];\r\n  // 棋譜\r\n  kifu: Array<string>;\r\n  // 先手番かどうか\r\n  turn: boolean;\r\n  // 手数\r\n  moves: number;\r\n  // 表示用の手数\r\n  moves_sub: number;\r\n  // 掴んでいる駒\r\n  clicked_piece: number;\r\n  // 最後に動かした駒\r\n  final_piece: number;\r\n  // 先手の名前\r\n  black_name: string;\r\n  // 後手の名前\r\n  white_name: string;\r\n  // 自分が先手かどうか\r\n  is_black: boolean;\r\n}\r\n\r\nexport class Game extends React.Component<IGameProps, IGameState> {\r\n  constructor(props: IGameProps){\r\n    super(props);\r\n    this.state = {\r\n      start_pos: this.props.start_pos,\r\n      start_black_piece: this.props.start_black_piece,\r\n      start_white_piece: this.props.start_white_piece,\r\n      current_pos: this.props.current_pos,\r\n      current_black_piece: this.props.current_black_piece,\r\n      current_white_piece: this.props.current_white_piece,\r\n      control_piece: this.props.control_piece,\r\n      kifu: this.props.kifu,\r\n      turn: this.props.turn,\r\n      moves: this.props.moves,\r\n      moves_sub: this.props.moves_sub,\r\n      clicked_piece: this.props.clicked_piece,\r\n      final_piece: this.props.final_piece,\r\n      black_name: this.props.black_name,\r\n      white_name: this.props.white_name,\r\n      is_black: this.props.is_black,\r\n    };\r\n  }\r\n\r\n  handleClick(i: number){\r\n    if(this.state.moves < 0){\r\n      return;\r\n    }\r\n    let clicked_piece: number = this.state.clicked_piece;\r\n    const turn = this.state.turn;\r\n    let tmp_pos = _.cloneDeep(this.state.current_pos);  // 動かした後の盤面\r\n    const current_black_piece = _.cloneDeep(this.state.current_black_piece);\r\n    const current_white_piece = _.cloneDeep(this.state.current_white_piece);\r\n    // 持ち駒をクリックしたとき\r\n    if(i < Setting.WHITE * 2){\r\n      if(clicked_piece === Setting.UNCLICKED){\r\n        if((turn ? (i < Setting.WHITE && current_black_piece[i] > 0) : (i >= Setting.WHITE && current_white_piece[i - Setting.WHITE] > 0))){\r\n          // 候補の列挙\r\n          // 駒を打つときは王手がかかっていないかと、行き所がないか、二歩、打ち歩詰めをチェックする\r\n          let tmp_control_piece = set_control_piece(true);\r\n          let num = (i >= Setting.WHITE ? i - Setting.WHITE : i);\r\n          for(let x = 0; x < Setting.LENGTH; ++x){\r\n            for(let y = 0; y < Setting.LENGTH; ++y){\r\n              // 駒がある場所は置けない\r\n              if(tmp_pos[x][y].piece_num() !== Setting.MT){\r\n                tmp_control_piece[x][y] = false;\r\n              }\r\n              else if(num === 4){\r\n                tmp_control_piece[x][y] = (turn ? y > 1 : y < Setting.LENGTH - 1 - 1);\r\n              }\r\n              else if(num === 5){\r\n                tmp_control_piece[x][y] = (turn ? y !== 0 : y !== Setting.LENGTH - 1);\r\n              }\r\n              else if(num === 6){\r\n                tmp_control_piece[x][y] = (turn ? y !== 0 : y !== Setting.LENGTH - 1);\r\n                tmp_pos[x][y] = set_piece(num, turn);\r\n                if(nifu(tmp_pos, x, turn)){\r\n                  tmp_control_piece[x][y] = false;\r\n                }\r\n                // 打ち歩詰めかどうか\r\n                // 前に敵玉がいるときだけチェックすればよい\r\n                if((turn ? (y > 1 && tmp_pos[x][y - 1].piece_num() === 7 && tmp_pos[x][y - 1].turn() !== turn) : (y < Setting.LENGTH - 1 && tmp_pos[x][y + 1].piece_num() === 7 && tmp_pos[x][y + 1].turn() !== turn))){\r\n                  if(mate(tmp_pos, (turn ? current_white_piece : current_black_piece), !turn)){\r\n                    tmp_control_piece[x][y] = false;\r\n                  }\r\n                }\r\n                // 盤面を戻す\r\n                tmp_pos[x][y] = new Mt();\r\n              }\r\n              if(tmp_control_piece[x][y]){\r\n                tmp_pos[x][y] = set_piece(num, turn);\r\n                tmp_control_piece[x][y] = !check(tmp_pos, (turn ? current_white_piece : current_black_piece), turn);\r\n                tmp_pos[x][y] = new Mt();\r\n              }\r\n            }\r\n          }\r\n          this.setState({\r\n            control_piece: tmp_control_piece,\r\n            clicked_piece: i,\r\n          });\r\n        }\r\n        return;\r\n      }\r\n      this.setState({\r\n        clicked_piece: Setting.UNCLICKED,\r\n        control_piece: set_control_piece(),\r\n      });\r\n      return;\r\n    }\r\n\r\n    // 持ち駒の分を引く\r\n    let x: number = Math.floor((i - Setting.WHITE * 2) / Setting.LENGTH);\r\n    let y: number = (i - Setting.WHITE * 2) % Setting.LENGTH;\r\n    const current_pos = this.state.current_pos.concat();\r\n    // 駒を掴んでないとき\r\n    if(this.state.clicked_piece === Setting.UNCLICKED){\r\n      // 手番の駒以外はダメ\r\n      if(current_pos[x][y].piece_num() === Setting.MT || current_pos[x][y].turn() !== turn){\r\n        return;\r\n      }\r\n      // 候補の列挙\r\n      // 王手がかかっていないかのみをチャックすればよい\r\n      // 駒を成らないので候補に行き所がない駒が含まれることもあるが、チェックする必要はない\r\n      // これは適切な移動ならば行き所のない駒はできないため\r\n      let tmp_control_pos = control_pos(current_pos, turn, x, y, -1, -1, false);\r\n      let tmp_control_piece = set_control_piece(false);\r\n      for(let xx = 0; xx < Setting.LENGTH; ++xx){\r\n        for(let yy = 0; yy < Setting.LENGTH; ++yy){\r\n          if(tmp_control_pos[xx][yy] === 0){\r\n            continue;\r\n          }\r\n          // 手番の駒はダメ\r\n          if(current_pos[xx][yy].piece_num() !== Setting.MT && current_pos[xx][yy].turn() === turn){\r\n            continue;\r\n          }\r\n          let piece = tmp_pos[xx][yy];\r\n          tmp_pos[xx][yy] = tmp_pos[x][y];\r\n          tmp_pos[x][y] = new Mt();\r\n          tmp_control_piece[xx][yy] = (check(tmp_pos, (turn ? current_black_piece : current_white_piece), turn) === 0);\r\n          tmp_pos[x][y] = tmp_pos[xx][yy];\r\n          tmp_pos[xx][yy] = piece;\r\n        }\r\n      }\r\n      this.setState({\r\n        control_piece: tmp_control_piece,\r\n        clicked_piece: i,\r\n      });\r\n      return;\r\n    }\r\n\r\n    // ここでは必ず盤面をクリックしている\r\n    let current_control_piece = this.state.control_piece;\r\n    // 候補になかったらダメ\r\n    if(!current_control_piece[x][y]){\r\n      this.setState({\r\n        control_piece: set_control_piece(),\r\n        clicked_piece: Setting.UNCLICKED,\r\n      });\r\n      return;\r\n    }\r\n\r\n    // 以下では正しい指し手であることが保証されている\r\n    const moves = this.state.moves;\r\n    let tmp_black_piece = _.cloneDeep(current_black_piece);\r\n    let tmp_white_piece = _.cloneDeep(current_white_piece);\r\n    let xx: number = -1;\r\n    let yy: number = -1;\r\n    // 持ち駒を掴んでいるとき\r\n    if(clicked_piece < Setting.WHITE * 2){\r\n      // 先手の駒を掴んでいる場合\r\n      // 掴むときに手番かチェックしているので、ここではチェックしなくてよい\r\n      if(turn){\r\n        // 持ち駒の更新\r\n        --tmp_black_piece[clicked_piece];\r\n         // 盤面の更新\r\n        tmp_pos[x][y] = set_piece(clicked_piece, turn);\r\n      }\r\n      else{\r\n        // 持ち駒の更新\r\n        --tmp_white_piece[clicked_piece - Setting.WHITE];\r\n         // 盤面の更新\r\n        tmp_pos[x][y] = set_piece(clicked_piece - Setting.WHITE, turn);\r\n      }\r\n    }\r\n    else{\r\n      // 持ち駒の分を引く\r\n      xx = Math.floor((clicked_piece - Setting.WHITE * 2) / Setting.LENGTH);\r\n      yy = (clicked_piece- Setting.WHITE * 2) % Setting.LENGTH;\r\n      let piece = tmp_pos[x][y];\r\n      // 盤面の更新\r\n      tmp_pos[x][y] = tmp_pos[xx][yy];\r\n      tmp_pos[xx][yy] = new Mt();\r\n      // 持ち駒の更新\r\n      let num: number = piece.piece_num();\r\n      if(num !== Setting.MT){\r\n        // 成っている駒を生に戻す\r\n        if(num > Setting.WHITE){\r\n          num -= Setting.MT / 2;\r\n        }\r\n        turn ? ++tmp_black_piece[num] : ++tmp_white_piece[num];\r\n      }\r\n    }\r\n\r\n    // 成れるときは聞く\r\n    // 条件：盤面から3段目に移動または3段目から移動するときで、金と玉以外の成っていない駒のとき\r\n    let num: number = tmp_pos[x][y].piece_num();\r\n    if(xx !== -1 && (turn ? (y < 3 || yy < 3) : (y > Setting.LENGTH - 1 - 3 || yy > Setting.LENGTH - 1 - 3)) && num < Setting.WHITE && Setting.PIECES[num + Setting.MT / 2] !== \"\"){\r\n      let is_promoted: Boolean = false;\r\n      // 必ず成るときは聞かずに成る\r\n      // 歩、香の1段目、桂の1,2段目\r\n      if(5 <= num && num <= 6){\r\n        if((turn ? y === 0 : y === Setting.LENGTH - 1)){\r\n          tmp_pos[x][y].promote();\r\n          is_promoted = true;\r\n        }\r\n      }\r\n      else if(num === 4){\r\n        if((turn ? y < 2 : y > Setting.LENGTH -1 - 2)){\r\n          tmp_pos[x][y].promote();\r\n          is_promoted = true;\r\n        }\r\n      }\r\n      if(!is_promoted){\r\n        if(window.confirm(\"成りますか？\")) {\r\n          tmp_pos[x][y].promote();\r\n        }\r\n      }\r\n    }\r\n    this.setState({\r\n      current_pos: tmp_pos,\r\n      current_black_piece: tmp_black_piece,\r\n      current_white_piece: tmp_white_piece,\r\n      control_piece: set_control_piece(),\r\n      turn: !turn,\r\n      moves: moves + 1,\r\n      moves_sub: moves + 1,\r\n      clicked_piece: Setting.UNCLICKED,\r\n      final_piece: i,\r\n    });\r\n    // 詰んでいたら対局終了\r\n    if(mate(tmp_pos, (turn ? tmp_white_piece : tmp_black_piece), !turn)){\r\n      setTimeout(() => {\r\n        alert(`まで${(moves + 1)}手にて${(turn ? this.state.black_name : this.state.white_name)}の勝ちです！`);\r\n      }, 200);\r\n      this.setState({\r\n        moves: -1,\r\n      });\r\n      return;\r\n    }\r\n  }\r\n\r\n  resign(){\r\n    const moves: number = this.state.moves;\r\n    if(moves < 0){\r\n      return;\r\n    }\r\n    if(window.confirm(\"投了しますか？\")) {\r\n      setTimeout(() => {\r\n        alert(`まで${(moves)}手にて${(this.state.turn ? this.state.white_name : this.state.black_name)}の勝ちです！`);\r\n      }, 200);\r\n      this.setState({\r\n        moves: -1,\r\n      });\r\n      return;\r\n    }\r\n  }\r\n\r\n  rotate(){\r\n    this.setState({\r\n      is_black: !this.state.is_black,\r\n    });\r\n    return;\r\n  }\r\n\r\n  render() {\r\n    let game: string = \"game-info\";\r\n    if(!this.state.is_black){\r\n      game += \" white\";\r\n    }\r\n    let moves = this.state.moves_sub;\r\n    return (\r\n      <div className=\"game-info\">\r\n        <div className=\"game\">\r\n          <div className=\"center bold\">\r\n            {`△${this.state.white_name}　${moves}手目　▲${this.state.black_name}`}\r\n          </div>\r\n          <div className={game}>\r\n            <div className=\"game-info-white white\">\r\n              <div>{\"△\"}</div>\r\n              <Captured\r\n                squares={this.state.current_white_piece}\r\n                clicked_piece={this.state.clicked_piece}\r\n                is_black={false}\r\n                turn={this.state.turn}\r\n                onClick={i => this.handleClick(i)}\r\n              />\r\n            </div>\r\n            <div className=\"game-board\">\r\n              <Board\r\n                squares={this.state.current_pos}\r\n                onClick={i => this.handleClick(i)}\r\n                clicked_piece={this.state.clicked_piece}\r\n                control_piece={this.state.control_piece}\r\n                final_piece={this.state.final_piece}\r\n              />\r\n            </div>\r\n            <div className=\"game-info-black\">\r\n              <div>{\"▲\"}</div>\r\n              <Captured\r\n                squares={this.state.current_black_piece}\r\n                clicked_piece={this.state.clicked_piece}\r\n                is_black={true}\r\n                turn={this.state.turn}\r\n                onClick={i => this.handleClick(i)}\r\n              />\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <button className={\"status\"} onClick={() => this.rotate()} >\r\n          {\"反転\"}\r\n        </button>\r\n        <button className={\"status\"} onClick={() => this.resign()}>\r\n          {\"投了\"}\r\n        </button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport {Setting} from \"./setting\";\r\nimport {Game, make_board, set_kifu, set_pieces, set_control_piece} from './game';\r\n// import { Piece } from './pieces/piece';\r\n\r\nReactDOM.render(\r\n  <Game\r\n    start_pos={make_board()}\r\n    start_black_piece={set_pieces()}\r\n    start_white_piece={set_pieces()}\r\n    current_pos={make_board()}\r\n    current_black_piece={set_pieces()}\r\n    current_white_piece={set_pieces()}\r\n    control_piece={set_control_piece()}\r\n    kifu={set_kifu()}\r\n    turn={true}\r\n    moves={0}\r\n    moves_sub={0}\r\n    clicked_piece={Setting.UNCLICKED}\r\n    final_piece={Setting.UNCLICKED}\r\n    black_name={\"先手\"}\r\n    white_name={\"後手\"}\r\n    is_black={true}\r\n  />,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}