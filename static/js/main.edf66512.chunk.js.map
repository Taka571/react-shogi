{"version":3,"sources":["setting.tsx","pieces/piece.tsx","pieces/pawn.tsx","pieces/lance.tsx","pieces/knight.tsx","pieces/silver.tsx","pieces/gold.tsx","pieces/bishop.tsx","pieces/rook.tsx","pieces/king.tsx","pieces/mt.tsx","board.tsx","game.tsx","index.tsx"],"names":["Setting","LENGTH","UNCLICKED","WHITE","MT","PIECES","NUM","Piece","_out","_turn","_piece_num","this","Pawn","Lance","Knight","Silver","Gold","Bishop","Rook","King","Mt","Square","props","class_string","is_captured","is_black","is_final","is_clicked","className","onClick","value","Board","i","j","x","Math","floor","y","key","squares","out","turn","content","final_piece","push","renderSquare","clicked_piece","items","Array","concat","React","Component","Captured","num","make_board","sfen","set_piece","n","piece","set_pieces","fill","control_pos_sub","control_pos","pos","kingx","kingy","check_king","piece_num","dx","dy","length","xx","yy","check","captured","def_controls","atc_controls","cnt","atc","atcx","atcy","abs","cur_pos","_","cloneDeep","can_move","nifu","mate","bfr_pos","Game","state","start_pos","start_black_piece","start_white_piece","current_pos","current_black_piece","current_white_piece","kifu","moves","setState","tmp_pos","tmp_black_piece","tmp_white_piece","is_promoted","promote","window","confirm","setTimeout","alert","handleClick","ReactDOM","render","document","getElementById"],"mappings":"8MAAaA,EAAb,kCAAaA,EAEGC,OAAiB,EAFpBD,EAGGE,UAAoB,GAHvBF,EAIGG,MAAgB,EAJnBH,EAKGI,GAAa,GALhBJ,EAMGK,OAAmB,CAAC,SAAK,SAAK,SAAK,SAAK,SAAK,SAAK,SAAK,SAAK,SAAK,SAAK,GAAI,SAAK,SAAK,SAAK,SAAK,IANjGL,EAOGM,IAAgB,CAAC,GAAI,GAAI,SAAK,SAAK,SAAK,SAAK,SAAK,SAAK,SAAK,SAAK,SAAK,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,gB,gCCL1GC,EAAtB,WAQE,WAAYC,EAAcC,EAAgBC,GAAoB,yBANtDF,UAMqD,OAJrDC,WAIqD,OAFrDC,gBAEqD,EAC3DC,KAAKH,KAAOA,EACZG,KAAKF,MAAQA,EACbE,KAAKD,WAAaA,EAXtB,kDAeI,OAAOC,KAAKH,OAfhB,6BAkBI,OAAOG,KAAKF,QAlBhB,kCAqBI,OAAOE,KAAKD,aArBhB,gCAwBIC,KAAKD,YAAcV,EAAQI,GAAK,EAChCO,KAAKH,KAAOR,EAAQK,OAAOM,KAAKD,gBAzBpC,KCCaE,EAAb,YACE,WAAYH,GAAsC,IAAtBC,EAAqB,uDAAF,EAAE,qEACzCV,EAAQK,OAAOK,GAAaD,EAAOC,IAF7C,2BAA0BH,GCAbM,EAAb,YACE,WAAYJ,GAAsC,IAAtBC,EAAqB,uDAAF,EAAE,qEACzCV,EAAQK,OAAOK,GAAaD,EAAOC,IAF7C,2BAA2BH,GCAdO,EAAb,YACE,WAAYL,GAAsC,IAAtBC,EAAqB,uDAAF,EAAE,qEACzCV,EAAQK,OAAOK,GAAaD,EAAOC,IAF7C,2BAA4BH,GCAfQ,EAAb,YACE,WAAYN,GAAsC,IAAtBC,EAAqB,uDAAF,EAAE,qEACzCV,EAAQK,OAAOK,GAAaD,EAAOC,IAF7C,2BAA4BH,GCAfS,EAAb,YACE,WAAYP,GAAsC,IAAtBC,EAAqB,uDAAF,EAAE,qEACzCV,EAAQK,OAAOK,GAAaD,EAAOC,IAF7C,2BAA0BH,GCAbU,EAAb,YACE,WAAYR,GAAsC,IAAtBC,EAAqB,uDAAF,EAAE,qEACzCV,EAAQK,OAAOK,GAAaD,EAAOC,IAF7C,2BAA4BH,GCAfW,EAAb,YACE,WAAYT,GAAsC,IAAtBC,EAAqB,uDAAF,EAAE,qEACzCV,EAAQK,OAAOK,GAAaD,EAAOC,IAF7C,2BAA0BH,GCAbY,EAAb,YACE,WAAYV,GAAsC,IAAtBC,EAAqB,uDAAF,EAAE,qEACzCV,EAAQK,OAAOK,GAAaD,EAAOC,IAF7C,2BAA0BH,GCDba,EAAb,YACE,aAAwD,IAA5CX,IAA2C,yDAAtBC,EAAsB,uDAAH,GAAG,qEAC/C,IAAKD,EAAOC,IAFtB,2BAAwBH,GCwBxB,SAASc,EAAOC,GACd,IAAIC,EAAuB,GAgB3B,OAfGD,EAAME,YACPD,EAAe,YAGfA,EAAe,eACXD,EAAMG,WACRF,GAA8B,WAG/BD,EAAMI,WACPH,GAA8B,UAE7BD,EAAMK,aACPJ,GAA8B,WAG9B,4BACEK,UAAWL,EACXM,QAASP,EAAMO,SAEdP,EAAMQ,OAmBN,IAAMC,EAAb,qLAEeL,EAAmBC,EAAqBK,GAAY,IAAD,OAC1DC,EAAID,EAAoB,EAAhBhC,EAAQG,MAChB+B,EAAYC,KAAKC,MAAMH,EAAIjC,EAAQC,QACnCoC,EAAYJ,EAAIjC,EAAQC,OAC5B,OACE,kBAACoB,EAAD,CACEiB,IAAKN,EACLN,SAAUA,EACVC,WAAYA,EACZG,MAAOnB,KAAKW,MAAMiB,QAAQL,GAAGG,GAAGG,MAChCf,SAAUd,KAAKW,MAAMiB,QAAQL,GAAGG,GAAGI,OACnCjB,aAAa,EACbK,QAAS,kBAAM,EAAKP,MAAMO,QAAQG,QAd1C,8BAmBUK,GAEN,IADA,IAAIK,EAAU,GACNR,EAAIlC,EAAQC,OAAS,EAAGiC,GAAK,IAAKA,EACrCA,EAAIlC,EAAQC,OAASoC,IAAM1B,KAAKW,MAAMqB,YAA8B,EAAhB3C,EAAQG,MAC7DuC,EAAQE,KAAKjC,KAAKkC,cAAa,GAAM,EAAOX,EAAIlC,EAAQC,OAASoC,EAAoB,EAAhBrC,EAAQG,QAEvE+B,EAAIlC,EAAQC,OAASoC,IAAM1B,KAAKW,MAAMwB,cAAgC,EAAhB9C,EAAQG,MACpEuC,EAAQE,KAAKjC,KAAKkC,cAAa,GAAO,EAAMX,EAAIlC,EAAQC,OAASoC,EAAoB,EAAhBrC,EAAQG,QAG7EuC,EAAQE,KAAKjC,KAAKkC,cAAa,GAAO,EAAOX,EAAIlC,EAAQC,OAASoC,EAAoB,EAAhBrC,EAAQG,QAGlF,OAAOuC,IAhCX,+BAqCI,IADA,IAAIK,EAAQ,IAAIC,MACRX,EAAI,EAAGA,EAAIrC,EAAQC,SAAUoC,EACnCU,EAAQA,EAAME,OAAO,yBAAKrB,UAAU,gBAAgBU,IAAKD,GAAI1B,KAAK+B,QAAQL,KAG5E,OACE,6BAEGU,OA5CT,GAA2BG,IAAMC,WAkEpBC,EAAb,qLAEezB,EAAqBK,GAAY,IAAD,OAC3C,OAAGrB,KAAKW,MAAMG,SAEV,kBAACJ,EAAD,CACEiB,IAAKN,EACLN,UAAU,EACVC,WAAYA,EACZG,MAAO9B,EAAQK,OAAO2B,GACtBP,UAAU,EACVD,aAAa,EACbK,QAAS,kBAAM,EAAKP,MAAMO,QAAQG,MAMpC,kBAACX,EAAD,CACEiB,IAAKN,EACLN,UAAU,EACVC,WAAYA,EACZG,MAAO9B,EAAQK,OAAO2B,GACtBP,UAAU,EACVD,aAAa,EACbK,QAAS,kBAAM,EAAKP,MAAMO,QAAQG,EAAIhC,EAAQG,YAzBxD,+BAoCI,IAJA,IAAI4C,EAAQ,IAAIC,MACVF,EAAyBnC,KAAKW,MAAMmB,KAAO9B,KAAKW,MAAMwB,cAAgBnC,KAAKW,MAAMwB,cAAgB9C,EAAQG,MACzGsB,EAAoBd,KAAKW,MAAMG,SAC/BgB,EAAgB9B,KAAKW,MAAMmB,KACzBT,EAAI,EAAGA,EAAIhC,EAAQG,QAAS6B,EAAE,CACpC,IAAIqB,EAAM1C,KAAKW,MAAMiB,QAAQP,GAC1BqB,EAAM,IAELN,EADCf,IAAMc,GAAiBrB,IAAagB,EAC7BM,EAAME,OAAO,yBAAKrB,UAAU,gBAAgBU,IAAKN,GAAIrB,KAAKkC,cAAa,EAAMb,KAG7Ee,EAAME,OAAO,yBAAKrB,UAAU,gBAAgBU,IAAKN,GAAIrB,KAAKkC,cAAa,EAAOb,KAErFqB,EAAM,IACPN,EAAQA,EAAME,OAAO,yBAAKrB,UAAU,gBAAgBU,IAAK,MAAMN,GAC7D,4BACEJ,UAAW,UAEZ5B,EAAQM,IAAI+C,QAOrB,OACE,6BACGN,OA3DT,GAA8BG,IAAMC,W,gBCpH7B,SAASG,IAEd,IAF2H,IAAlGC,EAAiG,uDAA5F,kEAC1BhB,GADsH,wDACjG,IACjBP,EAAI,EAAGA,EAAIhC,EAAQC,SAAU+B,EAAE,CACrCO,EAAQP,GAAK,GACb,IAAI,IAAIC,EAAI,EAAGA,EAAIjC,EAAQC,SAAUgC,EACnCM,EAAQP,GAAGY,KAAK,IAAIxB,GAGxB,GAAY,oEAATmC,EAA2E,CAC5E,IAAI,IAAIvB,EAAI,EAAGA,EAAIhC,EAAQC,SAAU+B,EACnCO,EAAQP,GAAG,GAAK,IAAIpB,GAAK,GACzB2B,EAAQP,GAAG,GAAK,IAAIpB,GAAK,GAE3B2B,EAAQ,GAAG,GAAK,IAAI1B,GAAM,GAC1B0B,EAAQ,GAAG,GAAK,IAAI1B,GAAM,GAC1B0B,EAAQ,GAAG,GAAK,IAAI1B,GAAM,GAC1B0B,EAAQ,GAAG,GAAK,IAAI1B,GAAM,GAE1B0B,EAAQ,GAAG,GAAK,IAAIzB,GAAO,GAC3ByB,EAAQ,GAAG,GAAK,IAAIzB,GAAO,GAC3ByB,EAAQ,GAAG,GAAK,IAAIzB,GAAO,GAC3ByB,EAAQ,GAAG,GAAK,IAAIzB,GAAO,GAE3ByB,EAAQ,GAAG,GAAK,IAAIxB,GAAO,GAC3BwB,EAAQ,GAAG,GAAK,IAAIxB,GAAO,GAC3BwB,EAAQ,GAAG,GAAK,IAAIxB,GAAO,GAC3BwB,EAAQ,GAAG,GAAK,IAAIxB,GAAO,GAE3BwB,EAAQ,GAAG,GAAK,IAAIvB,GAAK,GACzBuB,EAAQ,GAAG,GAAK,IAAIvB,GAAK,GACzBuB,EAAQ,GAAG,GAAK,IAAIvB,GAAK,GACzBuB,EAAQ,GAAG,GAAK,IAAIvB,GAAK,GAEzBuB,EAAQ,GAAG,GAAK,IAAItB,GAAO,GAC3BsB,EAAQ,GAAG,GAAK,IAAItB,GAAO,GAE3BsB,EAAQ,GAAG,GAAK,IAAIrB,GAAK,GACzBqB,EAAQ,GAAG,GAAK,IAAIrB,GAAK,GAEzBqB,EAAQ,GAAG,GAAK,IAAIpB,GAAK,GACzBoB,EAAQ,GAAG,GAAK,IAAIpB,GAAK,GAK3B,OAAOoB,EAGF,SAASiB,EAAUC,EAAWhC,GACnC,IAAIiC,EAAe,IAAItC,EAQvB,OAPS,IAANqC,IAASC,EAAQ,IAAIxC,EAAKO,IACpB,IAANgC,IAASC,EAAQ,IAAIzC,EAAOQ,IACtB,IAANgC,IAASC,EAAQ,IAAI1C,EAAKS,IACpB,IAANgC,IAASC,EAAQ,IAAI3C,EAAOU,IACtB,IAANgC,IAASC,EAAQ,IAAI5C,EAAOW,IACtB,IAANgC,IAASC,EAAQ,IAAI7C,EAAMY,IACrB,IAANgC,IAASC,EAAQ,IAAI9C,EAAKa,IACtBiC,EAGF,SAASC,IAEd,OADwB,IAAIX,MAAchD,EAAQG,OAAOyD,KAAK,GAYhE,SAASC,EAAgBC,EAAyBC,EAAgBtB,EAAeP,EAAWG,GAAqF,IAA1E2B,EAAyE,wDAAxD,EAAGC,EAAqD,wDAApC,EAAGC,IAAiC,yDAC1Kb,EAAcU,EAAI7B,GAAGG,GAAG8B,YAE5B,GAAW,IAARd,EAYH,GAAW,IAARA,GAAqB,IAARA,GAAqB,IAARA,GAAqB,IAARA,GAAc,IAAMA,GAAOA,GAAO,GAA5E,CACE,IAAIe,EACAC,EAEO,IAARhB,GACDe,EAAK,IAAIpB,OAAe,EAAG,GAC3BqB,EAAK,IAAIrB,OAAe,GAAI,IAGd,IAARK,GACNe,EAAK,IAAIpB,OAAe,EAAG,EAAG,EAAG,GAAI,GACrCqB,EAAK,IAAIrB,OAAe,GAAI,GAAI,EAAG,EAAG,IAGxB,IAARK,GAAc,IAAMA,GAAOA,GAAO,IACxCe,EAAK,IAAIpB,OAAe,EAAG,EAAG,EAAG,EAAG,GAAI,GACxCqB,EAAK,IAAIrB,OAAe,GAAI,GAAI,EAAG,EAAG,EAAG,IAItCkB,GACDE,EAAK,IAAIpB,OAAe,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,GAC/CqB,EAAK,IAAIrB,OAAe,GAAI,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,KAG/CoB,EAAK,IAAIpB,MAAc,GACvBqB,EAAK,IAAIrB,MAAc,IAG3B,IAAI,IAAIhB,EAAI,EAAGA,EAAGoC,EAAGE,SAAUtC,EAAE,CAC/B,IAAIuC,EAAM9B,EAAOP,EAAIkC,EAAGpC,GAAKE,EAAIkC,EAAGpC,GAChCwC,EAAM/B,EAAOJ,EAAIgC,EAAGrC,GAAKK,EAAIgC,EAAGrC,GACjC,GAAKuC,GAAMA,EAAKvE,EAAQC,QAAU,GAAKuE,GAAMA,EAAKxE,EAAQC,WACzD6D,EAAYS,GAAIC,GAEfD,IAAOP,GAASQ,IAAOP,IACxBH,EAAY9D,EAAQC,QAAQ,GAAKiC,EAAIlC,EAAQC,OAASoC,EACtDyB,EAAY9D,EAAQC,QAAQ,GAAKoD,UAOzC,GAAW,IAARA,EAqBH,GAAW,IAARA,GAAqB,IAARA,EA0ChB,GAAW,IAARA,GAAqB,IAARA,OAAhB,CAGE,IAFA,IAAIe,EAAe,IAAIpB,MAAc,EAAG,EAAG,GAAI,GAC3CqB,EAAe,IAAIrB,OAAe,EAAG,EAAG,EAAG,GACvChB,EAAI,EAAGA,EAAIoC,EAAGE,SAAUtC,EAG9B,IAFA,IAAIuC,EAAKrC,EAAIkC,EAAGpC,GACZwC,EAAKnC,EAAIgC,EAAGrC,GACV,GAAKuC,GAAMA,EAAKvE,EAAQC,QAAU,GAAKuE,GAAMA,EAAKxE,EAAQC,WAC5D6D,EAAYS,GAAIC,GAEfD,IAAOP,GAASQ,IAAOP,IACxBH,EAAY9D,EAAQC,QAAQ,GAAKiC,EAAIlC,EAAQC,OAASoC,EACtDyB,EAAY9D,EAAQC,QAAQ,GAAKoD,GAIhCU,EAAIQ,GAAIC,GAAIL,cAAgBnE,EAAQI,IAAoC,IAA5B2D,EAAIQ,GAAIC,GAAIL,aAAqBJ,EAAIQ,GAAIC,GAAI/B,SAAWA,IAGvG8B,GAAMH,EAAGpC,GACTwC,GAAMH,EAAGrC,GAIb,GAAW,IAARqB,EAAU,CACXe,EAAK,IAAIpB,OAAe,EAAG,EAAG,GAAI,GAClCqB,EAAK,IAAIrB,OAAe,GAAI,EAAG,EAAG,GAClC,IAAI,IAAIhB,EAAI,EAAGA,EAAGoC,EAAGE,SAAUtC,EAAE,CAC/B,IAAIuC,EAAKrC,EAAIkC,EAAGpC,GACZwC,EAAKnC,EAAIgC,EAAGrC,GACb,GAAKuC,GAAMA,EAAKvE,EAAQC,QAAU,GAAKuE,GAAMA,EAAKxE,EAAQC,WACzD6D,EAAYS,GAAIC,GAEfD,IAAOP,GAASQ,IAAOP,IACxBH,EAAY9D,EAAQC,QAAQ,GAAKiC,EAAIlC,EAAQC,OAASoC,EACtDyB,EAAY9D,EAAQC,QAAQ,GAAKoD,UA5E3C,CAGE,IAFA,IAAIe,EAAe,IAAIpB,OAAe,EAAG,EAAG,GAAI,GAC5CqB,EAAe,IAAIrB,OAAe,GAAI,EAAG,EAAG,GACxChB,EAAI,EAAGA,EAAIoC,EAAGE,SAAUtC,EAG9B,IAFA,IAAIuC,EAAKrC,EAAIkC,EAAGpC,GACZwC,EAAKnC,EAAIgC,EAAGrC,GACV,GAAKuC,GAAMA,EAAKvE,EAAQC,QAAU,GAAKuE,GAAMA,EAAKxE,EAAQC,WAC5D6D,EAAYS,GAAIC,GAEfD,IAAOP,GAASQ,IAAOP,IACxBH,EAAY9D,EAAQC,QAAQ,GAAKiC,EAAIlC,EAAQC,OAASoC,EACtDyB,EAAY9D,EAAQC,QAAQ,GAAKoD,GAIhCU,EAAIQ,GAAIC,GAAIL,cAAgBnE,EAAQI,IAAoC,IAA5B2D,EAAIQ,GAAIC,GAAIL,aAAqBJ,EAAIQ,GAAIC,GAAI/B,SAAWA,IAGvG8B,GAAMH,EAAGpC,GACTwC,GAAMH,EAAGrC,GAIb,GAAW,IAARqB,EAAU,CACXe,EAAK,IAAIpB,MAAc,EAAG,EAAG,GAAI,GACjCqB,EAAK,IAAIrB,OAAe,EAAG,EAAG,EAAG,GACjC,IAAI,IAAIhB,EAAI,EAAGA,EAAGoC,EAAGE,SAAUtC,EAAE,CAC/B,IAAIuC,EAAKrC,EAAIkC,EAAGpC,GACZwC,EAAKnC,EAAIgC,EAAGrC,GACb,GAAKuC,GAAMA,EAAKvE,EAAQC,QAAU,GAAKuE,GAAMA,EAAKxE,EAAQC,WACzD6D,EAAYS,GAAIC,GAEfD,IAAOP,GAASQ,IAAOP,IACxBH,EAAY9D,EAAQC,QAAQ,GAAKiC,EAAIlC,EAAQC,OAASoC,EACtDyB,EAAY9D,EAAQC,QAAQ,GAAKoD,WApDzC,IAFA,IAAIgB,GAAc,EACdG,EAAM/B,EAAOJ,EAAIgC,EAAKhC,EAAIgC,EACxB,GAAKG,GAAMA,EAAKxE,EAAQC,WAC1B6D,EAAY5B,GAAGsC,GAEdtC,IAAM8B,GAASQ,IAAOP,IACvBH,EAAY9D,EAAQC,QAAQ,GAAKiC,EAAIlC,EAAQC,OAASoC,EACtDyB,EAAY9D,EAAQC,QAAQ,GAAKoD,GAIhCU,EAAI7B,GAAGsC,GAAIL,cAAgBnE,EAAQI,IAAmC,IAA3B2D,EAAI7B,GAAGsC,GAAIL,aAAqBJ,EAAI7B,GAAGsC,GAAI/B,SAAWA,IAGpG+B,EAAM/B,EAAO+B,EAAKH,EAAKG,EAAKH,OAtE9B,GAAG5B,EAAa,IAANJ,EAAUA,IAAMrC,EAAQC,OAAS,EAAE,CAC3C,IAAIuE,EAAM/B,EAAOJ,EAAI,EAAIA,EAAI,IAC3ByB,EAAY5B,GAAGsC,GAEdtC,IAAM8B,GAASQ,IAAOP,IACvBH,EAAY9D,EAAQC,QAAQ,GAAKiC,EAAIlC,EAAQC,OAASoC,EACtDyB,EAAY9D,EAAQC,QAAQ,GAAKoD,IA8JzC,SAASS,EAAYC,EAAgBtB,GAEnC,IAFkK,IAAhHP,EAA+G,wDAAlG,EAAGG,EAA+F,wDAAlF,EAAG2B,EAA+E,wDAA9D,EAAGC,EAA2D,wDAA1C,EAAGC,IAAuC,yDAC7JJ,EAA0B,GACtB9B,EAAI,EAAGA,EAAIhC,EAAQC,OAAS,IAAK+B,EACvC8B,EAAY9B,GAAK,IAAIgB,MAAchD,EAAQC,QAAQ2D,KAAK,GAE1D,IAAU,IAAP1B,EAED,OADA2B,EAAgBC,EAAaC,EAAKtB,EAAMP,EAAGG,GACpCyB,EAET,IAAI,IAAI9B,EAAI,EAAGA,EAAIhC,EAAQC,SAAU+B,EACnC,IAAI,IAAIC,EAAI,EAAGA,EAAIjC,EAAQC,SAAUgC,EAChC8B,EAAI/B,GAAGC,GAAGkC,cAAgBnE,EAAQI,IAAM2D,EAAI/B,GAAGC,GAAGQ,SAAWA,GAC9DoB,EAAgBC,EAAaC,EAAKtB,EAAMT,EAAGC,EAAG+B,EAAOC,EAAOC,GAIlE,OAAOJ,EAKT,SAASW,EAAMV,EAAgBW,EAAoBjC,GAAwD,IAAzCP,EAAwC,wDAA3B,EAAGG,EAAwB,wDAAV,EAE9F,IAAU,IAAPH,EACD,IAAI,IAAIF,EAAI,EAAGA,EAAIhC,EAAQC,SAAU+B,EACnC,IAAI,IAAIC,EAAI,EAAGA,EAAIjC,EAAQC,SAAUgC,EACnC,GAA6B,IAA1B8B,EAAI/B,GAAGC,GAAGkC,aAAqBJ,EAAI/B,GAAGC,GAAGQ,SAAWA,EAAK,CAC1DP,EAAIF,EACJK,EAAIJ,EACJD,EAAIhC,EAAQC,OACZgC,EAAIjC,EAAQC,OACZ,MAMR,IAAI0E,EAA2Bb,EAAYC,EAAKtB,GAAO,GAAI,GAAI,GAAI,GAAG,GAClEmC,EAA2Bd,EAAYC,GAAMtB,GAAO,GAAI,EAAGP,EAAGG,GAE9DwC,EAAcD,EAAa1C,GAAGG,GAClC,GAAW,IAARwC,EACD,OAAO,EAGT,GAAGA,EAAM,EACP,OAAa,GAANA,EAIT,IAAIC,EAAcF,EAAa5E,EAAQC,QAAQ,GAC3C8E,EAAe5C,KAAKC,MAAM0C,EAAM9E,EAAQC,QACxC+E,EAAeF,EAAM9E,EAAQC,OAE7BoD,EAAcuB,EAAa5E,EAAQC,QAAQ,GAC/C,GAAW,IAARoD,GAAqB,IAARA,GAAqB,IAARA,GAAqB,IAARA,GAAqB,IAARA,EAAU,CAC/D,IAAIe,EAAaW,EAAO7C,EACpBmC,EAAaW,EAAO3C,EACd,IAAP+B,IACDA,GAAMjC,KAAK8C,IAAIb,IAEP,IAAPC,IACDA,GAAMlC,KAAK8C,IAAIZ,IAIjB,IAFA,IAAIE,EAAarC,EAAIkC,EACjBI,EAAanC,EAAIgC,EACfE,IAAOQ,GAAQP,IAAOQ,GAAK,CAE/B,GAAGL,EAAaJ,GAAIC,GAAM,EACxB,OAAO,GAGT,IAAI,IAAIxC,EAAI,EAAGA,EAAIhC,EAAQG,QAAS6B,EAClC,GAAmB,IAAhB0C,EAAS1C,GAAZ,CAGA,IAAIkD,EAAqBC,IAAEC,UAAUrB,GAErC,GADAmB,EAAQX,GAAIC,GAAMhB,EAAUxB,EAAGS,GAC5B4C,EAAStB,EAAKmB,EAASR,GAAW,GAAI,EAAGxC,EAAGsC,GAAK/B,GAAM,CAExD,GAAS,IAANT,GAAWsD,EAAKJ,EAASX,EAAI9B,GAC9B,SAEF,OAAO,IAGX8B,GAAMH,EACNI,GAAMH,GAIV,OAAO,GAIT,SAASkB,EAAKxB,EAAgBW,EAAoBjC,GAIhD,IAFA,IAAIP,GAAa,EACbG,GAAa,EACTL,EAAI,EAAGA,EAAIhC,EAAQC,SAAU+B,EACnC,IAAI,IAAIC,EAAI,EAAGA,EAAIjC,EAAQC,SAAUgC,EACnC,GAA6B,IAA1B8B,EAAI/B,GAAGC,GAAGkC,aAAqBJ,EAAI/B,GAAGC,GAAGQ,SAAWA,EAAK,CAC1DP,EAAIF,EACJK,EAAIJ,EACJD,EAAIhC,EAAQC,OACZgC,EAAIjC,EAAQC,OACZ,MAKN,IAAI4E,EAAcJ,EAAMV,EAAKW,EAAUjC,EAAMP,EAAGG,GAEhD,GAAW,IAARwC,EACD,OAAO,EAMT,IAHA,IAAID,EAA2Bd,EAAYC,GAAMtB,GAC7C2B,EAAe,IAAIpB,MAAc,EAAG,EAAG,GAAI,GAAI,GAAI,EAAG,EAAG,GACzDqB,EAAe,IAAIrB,MAAc,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,GAAI,GACrDhB,EAAI,EAAGA,EAAIoC,EAAGE,SAAUtC,EAAE,CAChC,IAAIuC,EAAKrC,EAAIkC,EAAGpC,GACZwC,EAAKnC,EAAIgC,EAAGrC,GAChB,KAAGuC,EAAK,GAAKvE,EAAQC,QAAUsE,GAAMC,EAAK,GAAKxE,EAAQC,QAAUuE,MAI9DT,EAAIQ,GAAIC,GAAIL,cAAgBnE,EAAQI,IAAM2D,EAAIQ,GAAIC,GAAI/B,SAAWA,IAIxC,IAAzBmC,EAAaL,GAAIC,IAClB,OAAO,EAIX,OAAGrC,KAAKC,MAAMyC,EAAM,IAAM,GAInBA,EAAM,GAAK,EAKpB,SAASQ,EAASG,EAAoBN,EAAoBR,EAAoBH,EAAYC,EAAYtC,EAAWG,EAAWI,GAC1H,IAAIY,EAAc6B,EAAQhD,GAAGG,GAAG8B,YAGhC,OAAW,IAARI,EACU,IAARlB,EACOZ,EAAOJ,EAAI,EAAIA,EAAIrC,EAAQC,OAAS,EAAI,EAEvC,IAARoD,EACOZ,EAAa,IAANJ,EAAUA,IAAMrC,EAAQC,OAAS,EAEvC,IAARoD,IACGZ,EAAa,IAANJ,EAAUA,IAAMrC,EAAQC,OAAS,KAIpCsF,EAAKL,EAASR,GAAWjC,GAMVqB,EAAY0B,EAAS/C,EAAM8B,EAAIC,GAC1CtC,GAAGG,GAAK,EAK1B,SAASiD,EAAKvB,EAAgB7B,EAAWO,GAEvC,IADA,IAAIoC,EAAM,EACF7C,EAAI,EAAGA,EAAIhC,EAAQC,SAAU+B,EACN,IAA1B+B,EAAI7B,GAAGF,GAAGmC,aAAqBJ,EAAI7B,GAAGF,GAAGS,SAAWA,KACnDoC,EAGN,OAAOA,GAAO,EAsCT,IAAMY,EAAb,YACE,WAAYnE,GAAmB,IAAD,8BAC5B,4CAAMA,KACDoE,MAAQ,CACXC,UAAWrC,IACXsC,kBAAmBjC,IACnBkC,kBAAmBlC,IACnBmC,YAAaxC,IACbyC,oBAAqBpC,IACrBqC,oBAAqBrC,IACrBsC,KAnZsB,GAoZtBxD,MAAM,EACNyD,MAAO,EACPpD,cAAe9C,EAAQE,UACvByC,YAAa3C,EAAQE,WAbK,EADhC,yEAkBc8B,GACV,IAAIc,EAAwBnC,KAAK+E,MAAM5C,cACjCL,EAAO9B,KAAK+E,MAAMjD,KAExB,GAAGT,EAAoB,EAAhBhC,EAAQG,MACb,OAAG2C,IAAkB9C,EAAQE,gBACvBuC,EAAOT,EAAIhC,EAAQG,MAAQ6B,GAAGhC,EAAQG,QACxCQ,KAAKwF,SAAS,CACZrD,cAAed,UAKrBrB,KAAKwF,SAAS,CACZrD,cAAe9C,EAAQE,YAM3B,IAAIgC,EAAYC,KAAKC,OAAOJ,EAAoB,EAAhBhC,EAAQG,OAAaH,EAAQC,QACzDoC,GAAaL,EAAoB,EAAhBhC,EAAQG,OAAaH,EAAQC,OAC5C6F,EAAcnF,KAAK+E,MAAMI,YAAY7C,SAE3C,GAAGtC,KAAK+E,MAAM5C,gBAAkB9C,EAAQE,UAaxC,GAAG4F,EAAY5D,GAAGG,GAAG8B,cAAgBnE,EAAQI,IAAM0F,EAAY5D,GAAGG,GAAGI,SAAWA,EAAhF,CAQA,IAAMsD,EAAsBZ,IAAEC,UAAUzE,KAAK+E,MAAMK,qBAC7CC,EAAsBb,IAAEC,UAAUzE,KAAK+E,MAAMM,qBAC7CE,EAAQvF,KAAK+E,MAAMQ,MACrBE,EAAUjB,IAAEC,UAAUU,GACtBO,EAAkBlB,IAAEC,UAAUW,GAC9BO,EAAkBnB,IAAEC,UAAUY,GAC9BzB,GAAc,EACdC,GAAc,EAElB,GAAG1B,EAAgC,EAAhB9C,EAAQG,MAAU,CAEnC,GAAG2F,EAAY5D,GAAGG,GAAG8B,cAAgBnE,EAAQI,GAI3C,YAHAO,KAAKwF,SAAS,CACZrD,cAAe9C,EAAQE,YAMxBuC,KAEC4D,EAAgBvD,GAElBsD,EAAQlE,GAAGG,GAAKmB,EAAUV,EAAeL,OAIvC6D,EAAgBxD,EAAgB9C,EAAQG,OAE1CiG,EAAQlE,GAAGG,GAAKmB,EAAUV,EAAgB9C,EAAQG,MAAOsC,QAGzD,CAEF8B,EAAKpC,KAAKC,OAAOU,EAAgC,EAAhB9C,EAAQG,OAAaH,EAAQC,QAC9DuE,GAAM1B,EAA+B,EAAhB9C,EAAQG,OAAaH,EAAQC,OAClD,IAAIyD,EAAQ0C,EAAQlE,GAAGG,GAEvB+D,EAAQlE,GAAGG,GAAK+D,EAAQ7B,GAAIC,GAC5B4B,EAAQ7B,GAAIC,GAAM,IAAIpD,EAEtB,IAAIiC,EAAcK,EAAMS,YACrBd,IAAQrD,EAAQI,KAEdiD,EAAMrD,EAAQG,QACfkD,GAAOrD,EAAQI,GAAK,GAEtBqC,IAAS4D,EAAgBhD,KAASiD,EAAgBjD,IAOtD,GAAIgC,EAASS,EAAaM,EAAU3D,EAAO6D,EAAkBD,EAAkB9B,EAAIC,EAAItC,EAAGG,EAAGI,IAA8E,IAArEgC,EAAM2B,EAAU3D,EAAO4D,EAAkBC,EAAkB7D,GAAjK,CAQA,IAAIY,EAAc+C,EAAQlE,GAAGG,GAAG8B,YAChC,IAAW,IAARI,IAAc9B,EAAQJ,EAAI,GAAKmC,EAAK,EAAMnC,EAAIrC,EAAQC,OAAS,EAAI,GAAKuE,EAAKxE,EAAQC,OAAS,EAAI,IAAOoD,EAAMrD,EAAQG,OAAkD,KAAzCH,EAAQK,OAAOgD,EAAMrD,EAAQI,GAAK,GAAU,CAC7K,IAAImG,GAAuB,EAGxB,GAAKlD,GAAOA,GAAO,GAChBZ,EAAa,IAANJ,EAAUA,IAAMrC,EAAQC,OAAS,KAC1CmG,EAAQlE,GAAGG,GAAGmE,UACdD,GAAc,GAGF,IAARlD,IACFZ,EAAOJ,EAAI,EAAIA,EAAIrC,EAAQC,OAAQ,EAAI,KACzCmG,EAAQlE,GAAGG,GAAGmE,UACdD,GAAc,GAGdA,GACCE,OAAOC,QAAQ,yCAChBN,EAAQlE,GAAGG,GAAGmE,UAIpB7F,KAAKwF,SAAS,CACZL,YAAaM,EACbL,oBAAqBM,EACrBL,oBAAqBM,EACrB7D,MAAOA,EACPyD,MAAOA,EAAQ,EACfpD,cAAe9C,EAAQE,UACvByC,YAAaX,KAGJ,IAARuC,GAA2C,IAA9B6B,EAAQlE,GAAGG,GAAG8B,aACzBmB,EAAKc,EAASlE,EAAGO,GAClBkE,YAAW,WACTC,MAAM,yDAAcV,EAAQ,sBAASzD,EAAO,eAAO,gBAAQ,0CAC1D,KAKJ8C,EAAKa,EAAU3D,EAAO6D,EAAkBD,GAAmB5D,IAC5DkE,YAAW,WACTC,MAAM,gBAAQV,EAAQ,GAAK,sBAASzD,EAAO,eAAM,gBAAQ,0CACxD,UApDH9B,KAAKwF,SAAS,CACZrD,cAAe9C,EAAQE,iBA/DzBS,KAAKwF,SAAS,CACZrD,cAAe9C,EAAQE,gBAf3B,CAEE,GAAG4F,EAAY5D,GAAGG,GAAG8B,cAAgBnE,EAAQI,IAAM0F,EAAY5D,GAAGG,GAAGI,SAAWA,EAC9E,OAEF9B,KAAKwF,SAAS,CACZrD,cAAed,OAhDvB,+BA+KY,IAAD,OACD8D,EAAcnF,KAAK+E,MAAMI,YAC/B,OACE,yBAAKlE,UAAU,QACb,yBAAKA,UAAU,yBACb,6BAAM,UACN,kBAAC,EAAD,CACEW,QAAS5B,KAAK+E,MAAMM,oBACpBlD,cAAenC,KAAK+E,MAAM5C,cAC1BrB,UAAU,EACVgB,KAAM9B,KAAK+E,MAAMjD,KACjBZ,QAAS,SAAAG,GAAC,OAAI,EAAK6E,YAAY7E,OAGnC,yBAAKJ,UAAU,cACb,kBAAC,EAAD,CACEW,QAASuD,EACTjE,QAAS,SAAAG,GAAC,OAAI,EAAK6E,YAAY7E,IAC/Bc,cAAenC,KAAK+E,MAAM5C,cAC1BH,YAAahC,KAAK+E,MAAM/C,eAG5B,yBAAKf,UAAU,mBACb,6BAAM,UACN,kBAAC,EAAD,CACEW,QAAS5B,KAAK+E,MAAMK,oBACpBjD,cAAenC,KAAK+E,MAAM5C,cAC1BrB,UAAU,EACVgB,KAAM9B,KAAK+E,MAAMjD,KACjBZ,QAAS,SAAAG,GAAC,OAAI,EAAK6E,YAAY7E,YA5M3C,GAA0BkB,IAAMC,WCrdhC2D,IAASC,OACP,kBAAC,EAAD,CACEpB,UAAWrC,IACXsC,kBAAmBjC,IACnBkC,kBAAmBlC,IACnBmC,YAAaxC,IACbyC,oBAAqBpC,IACrBqC,oBAAqBrC,IACrBsC,KDoEwB,GCnExBxD,MAAM,EACNyD,MAAO,EACPpD,cAAe9C,EAAQE,UACvByC,YAAa3C,EAAQE,YAEvB8G,SAASC,eAAe,U","file":"static/js/main.edf66512.chunk.js","sourcesContent":["export class Setting{\r\n  // 盤の列数（行数）\r\n  public static LENGTH: number = 9;\r\n  public static UNCLICKED: number = 81 + 14;\r\n  public static WHITE: number = 7;\r\n  public static MT: number = 16;\r\n  public static PIECES: string[] = [\"飛\", \"角\", \"金\", \"銀\", \"桂\", \"香\", \"歩\", \"玉\", \"竜\", \"馬\", \"\", \"全\", \"圭\", \"杏\", \"と\", \"\"];\r\n  public static NUM: string[] = [\"\", \"\", \"ニ\", \"三\", \"四\", \"五\", \"六\", \"七\", \"八\", \"九\", \"十\", \"十一\", \"十二\", \"十三\", \"十四\", \"十五\", \"十六\", \"十七\", \"十八\"];\r\n}\r\n","import { Setting } from \"../setting\";\r\n\r\nexport abstract class Piece{\r\n  // 出力する文字\r\n  private _out: string;\r\n  // 先手の駒か\r\n  private _turn: boolean;\r\n  // 駒番号\r\n  private _piece_num: number;\r\n\r\n  constructor(_out: string, _turn: boolean, _piece_num: number){\r\n    this._out = _out;\r\n    this._turn = _turn;\r\n    this._piece_num = _piece_num;\r\n  }\r\n\r\n  public out(): string{\r\n    return this._out;\r\n  }\r\n  public turn(): boolean{\r\n    return this._turn;\r\n  }\r\n  public piece_num(): number{\r\n    return this._piece_num;\r\n  }\r\n  public promote(): void{\r\n    this._piece_num += Setting.MT / 2;\r\n    this._out = Setting.PIECES[this._piece_num];\r\n  }\r\n\r\n}\r\n","import {Setting} from '../setting';\r\nimport {Piece} from './piece';\r\n\r\nexport class Pawn extends Piece{\r\n  constructor(_turn: boolean, _piece_num: number=6){\r\n    super(Setting.PIECES[_piece_num], _turn, _piece_num);\r\n  }\r\n}\r\n","import {Setting} from '../setting';\r\nimport {Piece} from './piece';\r\n\r\nexport class Lance extends Piece{\r\n  constructor(_turn: boolean, _piece_num: number=5){\r\n    super(Setting.PIECES[_piece_num], _turn, _piece_num);\r\n  }\r\n}\r\n","import {Setting} from '../setting';\r\nimport {Piece} from './piece';\r\n\r\nexport class Knight extends Piece{\r\n  constructor(_turn: boolean, _piece_num: number=4){\r\n    super(Setting.PIECES[_piece_num], _turn, _piece_num);\r\n  }\r\n}\r\n","import {Setting} from '../setting';\r\nimport {Piece} from './piece';\r\n\r\nexport class Silver extends Piece{\r\n  constructor(_turn: boolean, _piece_num: number=3){\r\n    super(Setting.PIECES[_piece_num], _turn, _piece_num);\r\n  }\r\n}\r\n","import {Setting} from '../setting';\r\nimport {Piece} from './piece';\r\n\r\nexport class Gold extends Piece{\r\n  constructor(_turn: boolean, _piece_num: number=2){\r\n    super(Setting.PIECES[_piece_num], _turn, _piece_num);\r\n  }\r\n}\r\n","import {Setting} from '../setting';\r\nimport {Piece} from './piece';\r\n\r\nexport class Bishop extends Piece{\r\n  constructor(_turn: boolean, _piece_num: number=1){\r\n    super(Setting.PIECES[_piece_num], _turn, _piece_num);\r\n  }\r\n}\r\n","import {Setting} from '../setting';\r\nimport {Piece} from './piece';\r\n\r\nexport class Rook extends Piece{\r\n  constructor(_turn: boolean, _piece_num: number=0){\r\n    super(Setting.PIECES[_piece_num], _turn, _piece_num);\r\n  }\r\n}\r\n","import {Setting} from '../setting';\r\nimport {Piece} from './piece';\r\n\r\nexport class King extends Piece{\r\n  constructor(_turn: boolean, _piece_num: number=7){\r\n    super(Setting.PIECES[_piece_num], _turn, _piece_num);\r\n  }\r\n}\r\n","import {Piece} from './piece';\r\n\r\nexport class Mt extends Piece{\r\n  constructor(_turn: boolean=true, _piece_num: number=16){\r\n    super(' ', _turn, _piece_num);\r\n  }\r\n}\r\n","import React from 'react';\r\n// import ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport {Setting} from \"./setting\";\r\nimport {Piece} from './pieces/piece';\r\n// import { Pawn } from \"./pieces/pawn\";\r\n// import { Mt } from \"./pieces/mt\";\r\n// import {Game} from './game';\r\n\r\ninterface ISquareProps{\r\n  is_final: boolean;\r\n  is_clicked: boolean;\r\n  value: string;\r\n  is_black: boolean;\r\n  is_captured: boolean;\r\n  onClick: () => void;\r\n}\r\n\r\ninterface ISquareState{\r\n  is_final: boolean;\r\n  is_clicked: boolean;\r\n  value: string;\r\n  is_black: boolean;\r\n  is_captured: boolean;\r\n}\r\n\r\nfunction Square(props: ISquareProps){\r\n  var class_string: string = \"\";\r\n  if(props.is_captured){\r\n    class_string = \"captured\";\r\n  }\r\n  else{\r\n    class_string = \"square piece\";\r\n    if(!props.is_black){\r\n      class_string = class_string + \" white\";\r\n    }\r\n  }\r\n  if(props.is_final){\r\n    class_string = class_string + \" final\";\r\n  }\r\n  if(props.is_clicked){\r\n    class_string = class_string + \" attack\";\r\n  }\r\n  return (\r\n    <button\r\n      className={class_string}\r\n      onClick={props.onClick}\r\n    >\r\n      {props.value}\r\n    </button>\r\n  );\r\n}\r\n\r\ninterface IBoardProps {\r\n  squares: Piece[][];\r\n  onClick: (i: number) => void;\r\n  clicked_piece: number;\r\n  final_piece: number;\r\n}\r\n\r\ninterface IBoardState {\r\n  squares: Piece[][];\r\n  onClick: (i: number) => void;\r\n  clicked_piece: number;\r\n  final_piece: number;\r\n}\r\n\r\nexport class Board extends React.Component<IBoardProps, IBoardState> {\r\n\r\n  renderSquare(is_final: boolean, is_clicked: boolean, i: number) {\r\n    let j = i - Setting.WHITE * 2;\r\n    let x: number = Math.floor(j / Setting.LENGTH);\r\n    let y: number = j % Setting.LENGTH;\r\n    return (\r\n      <Square\r\n        key={i}\r\n        is_final={is_final}\r\n        is_clicked={is_clicked}\r\n        value={this.props.squares[x][y].out()}\r\n        is_black={this.props.squares[x][y].turn()}\r\n        is_captured={false}\r\n        onClick={() => this.props.onClick(i)}\r\n      />\r\n    );\r\n  }\r\n\r\n  content(y: number){\r\n    let content = [];\r\n    for(let x = Setting.LENGTH - 1; x >= 0; --x){\r\n      if(x * Setting.LENGTH + y === this.props.final_piece - Setting.WHITE * 2){\r\n        content.push(this.renderSquare(true, false, x * Setting.LENGTH + y + Setting.WHITE * 2));\r\n      }\r\n      else if(x * Setting.LENGTH + y === this.props.clicked_piece - Setting.WHITE * 2){\r\n        content.push(this.renderSquare(false, true, x * Setting.LENGTH + y + Setting.WHITE * 2));\r\n      }\r\n      else{\r\n        content.push(this.renderSquare(false, false, x * Setting.LENGTH + y + Setting.WHITE * 2));\r\n      }\r\n    }\r\n    return content;\r\n  }\r\n\r\n  render() {\r\n    let items = new Array<JSX.Element>();\r\n    for(let y = 0; y < Setting.LENGTH; ++y){\r\n      items = items.concat(<div className=\"board-row ley\" key={y}>{this.content(y)}</div>);\r\n    }\r\n\r\n    return (\r\n      <div>\r\n        {/* <div className=\"status\">{status}</div> */}\r\n        {items}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\ninterface ICapturedProps {\r\n  squares: number[];\r\n  clicked_piece: number;\r\n  is_black: boolean;\r\n  turn: boolean;\r\n  onClick: (i: number) => void;\r\n}\r\n\r\ninterface ICapturedState {\r\n  squares: number[];\r\n  clicked_piece: number;\r\n  is_black: boolean;\r\n  turn: boolean;\r\n  onClick: (i: number) => void;\r\n}\r\n\r\nexport class Captured extends React.Component<ICapturedProps, ICapturedState> {\r\n\r\n  renderSquare(is_clicked: boolean, i: number) {\r\n    if(this.props.is_black){\r\n      return (\r\n        <Square\r\n          key={i}\r\n          is_final={false}\r\n          is_clicked={is_clicked}\r\n          value={Setting.PIECES[i]}\r\n          is_black={true}\r\n          is_captured={true}\r\n          onClick={() => this.props.onClick(i)}\r\n        />\r\n      );\r\n    }\r\n    else{\r\n      return (\r\n        <Square\r\n          key={i}\r\n          is_final={false}\r\n          is_clicked={is_clicked}\r\n          value={Setting.PIECES[i]}\r\n          is_black={false}\r\n          is_captured={true}\r\n          onClick={() => this.props.onClick(i + Setting.WHITE)}\r\n        />\r\n      );\r\n    }\r\n  }\r\n\r\n  render() {\r\n    let items = new Array<JSX.Element>();\r\n    const clicked_piece: number = (this.props.turn ? this.props.clicked_piece : this.props.clicked_piece - Setting.WHITE);\r\n    const is_black: boolean = this.props.is_black;\r\n    const turn: boolean = this.props.turn;\r\n    for(let i = 0; i < Setting.WHITE; ++i){\r\n      let num = this.props.squares[i];\r\n      if(num > 0){\r\n        if(i === clicked_piece && is_black === turn){\r\n          items = items.concat(<div className=\"board-row ley\" key={i}>{this.renderSquare(true, i)}</div>);\r\n        }\r\n        else{\r\n          items = items.concat(<div className=\"board-row ley\" key={i}>{this.renderSquare(false, i)}</div>);\r\n        }\r\n        if(num > 1){\r\n          items = items.concat(<div className=\"board-row ley\" key={\"num\"+i}>{\r\n            <button\r\n              className={\"number\"}\r\n            >\r\n            {Setting.NUM[num]}\r\n            </button>\r\n          }</div>);\r\n        }\r\n      }\r\n    }\r\n\r\n    return (\r\n      <div>\r\n        {items}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\r\n// import ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport {Setting} from \"./setting\";\r\nimport {Piece} from './pieces/piece';\r\nimport { Pawn } from \"./pieces/pawn\";\r\nimport { Lance } from \"./pieces/lance\";\r\nimport { Knight } from \"./pieces/knight\";\r\nimport { Silver } from \"./pieces/silver\";\r\nimport { Gold } from \"./pieces/gold\";\r\nimport { Bishop } from \"./pieces/bishop\";\r\nimport { Rook } from \"./pieces/rook\";\r\nimport { King } from \"./pieces/king\";\r\nimport { Mt } from \"./pieces/mt\";\r\nimport {Board, Captured} from './board';\r\nimport _ from 'lodash';\r\n\r\nexport function make_board(sfen=\"lnsgkgsnl/1r5b1/ppppppppp/9/9/9/PPPPPPPPP/1B5R1/LNSGKGSNL b - 1\", language='Ja'): Piece[][]{\r\n  var squares: Piece[][] = [];\r\n  for(let i = 0; i < Setting.LENGTH; ++i){\r\n    squares[i] = [];\r\n    for(let j = 0; j < Setting.LENGTH; ++j){\r\n      squares[i].push(new Mt());\r\n    }\r\n  }\r\n  if(sfen === \"lnsgkgsnl/1r5b1/ppppppppp/9/9/9/PPPPPPPPP/1B5R1/LNSGKGSNL b - 1\"){\r\n    for(let i = 0; i < Setting.LENGTH; ++i){\r\n      squares[i][2] = new Pawn(false);\r\n      squares[i][6] = new Pawn(true);\r\n    }\r\n    squares[0][0] = new Lance(false);\r\n    squares[8][0] = new Lance(false);\r\n    squares[0][8] = new Lance(true);\r\n    squares[8][8] = new Lance(true);\r\n\r\n    squares[1][0] = new Knight(false);\r\n    squares[7][0] = new Knight(false);\r\n    squares[1][8] = new Knight(true);\r\n    squares[7][8] = new Knight(true);\r\n\r\n    squares[2][0] = new Silver(false);\r\n    squares[6][0] = new Silver(false);\r\n    squares[2][8] = new Silver(true);\r\n    squares[6][8] = new Silver(true);\r\n\r\n    squares[3][0] = new Gold(false);\r\n    squares[5][0] = new Gold(false);\r\n    squares[3][8] = new Gold(true);\r\n    squares[5][8] = new Gold(true);\r\n\r\n    squares[1][1] = new Bishop(false);\r\n    squares[7][7] = new Bishop(true);\r\n\r\n    squares[7][1] = new Rook(false);\r\n    squares[1][7] = new Rook(true);\r\n\r\n    squares[4][0] = new King(false);\r\n    squares[4][8] = new King(true);\r\n  }\r\n  else{\r\n\r\n  }\r\n  return squares;\r\n}\r\n\r\nexport function set_piece(n: number, is_black: boolean): Piece{\r\n  var piece: Piece = new Mt();\r\n  if(n === 0) piece = new Rook(is_black);\r\n  if(n === 1) piece = new Bishop(is_black);\r\n  if(n === 2) piece = new Gold(is_black);\r\n  if(n === 3) piece = new Silver(is_black);\r\n  if(n === 4) piece = new Knight(is_black);\r\n  if(n === 5) piece = new Lance(is_black);\r\n  if(n === 6) piece = new Pawn(is_black);\r\n  return piece;\r\n}\r\n\r\nexport function set_pieces(): number[]{\r\n  var numbers: number[] = new Array<number>(Setting.WHITE).fill(0);\r\n  return numbers;\r\n}\r\n\r\nexport function set_kifu(): Array<string>{\r\n  var kifu: Array<string> = [];\r\n  return kifu;\r\n}\r\n\r\n// ある駒の利きを列挙\r\n// 手番の駒のマスは移動するときにはじいているため、ここではそのマスも利きに入れてしまう\r\n// ただし飛び道具はすり抜けしないために正しい効きを列挙する\r\nfunction control_pos_sub(control_pos: number[][], pos: Piece[][], turn: boolean, x: number, y: number, kingx: number = -1, kingy: number = -1, check_king: boolean = true): void{\r\n  let num: number = pos[x][y].piece_num();\r\n  // 歩\r\n  if(num === 6){\r\n    if(turn ? y !== 0 : y !== Setting.LENGTH - 1){\r\n      let yy = (turn ? y - 1 : y + 1);\r\n      ++control_pos[x][yy];\r\n      // 王手をしているか\r\n      if(x === kingx && yy === kingy){\r\n        control_pos[Setting.LENGTH][0] = x * Setting.LENGTH + y;\r\n        control_pos[Setting.LENGTH][1] = num;\r\n      }\r\n    }\r\n    return;\r\n  }\r\n  if(num === 2 || num === 3 || num === 4 || num === 7 || (11 <= num && num <= 14)){\r\n    let dx: number[];\r\n    let dy: number[];\r\n    // 桂\r\n    if(num === 4){\r\n      dx = new Array<number>(-1, 1);\r\n      dy = new Array<number>(-2, -2);\r\n    }\r\n    // 銀\r\n    else if(num === 3){\r\n      dx = new Array<number>(-1, 0, 1, 1, -1);\r\n      dy = new Array<number>(-1, -1, -1, 1, 1);\r\n    }\r\n    // 金、と、杏、圭、全\r\n    else if(num === 2 || (11 <= num && num <= 14)){\r\n      dx = new Array<number>(-1, 0, 1, 1, 0, -1);\r\n      dy = new Array<number>(-1, -1, -1, 0, 1, 0);\r\n    }\r\n    // 玉\r\n    else{\r\n      if(check_king){\r\n        dx = new Array<number>(-1, 0, 1, 1, 1, 0, -1, -1);\r\n        dy = new Array<number>(-1, -1, -1, 0, 1, 1, 1, 0);\r\n      }\r\n      else{\r\n        dx = new Array<number>(0);\r\n        dy = new Array<number>(0);\r\n      }\r\n    }\r\n    for(let i = 0; i< dx.length; ++i){\r\n      let xx = (turn ? x + dx[i] : x - dx[i]);\r\n      let yy = (turn ? y + dy[i] : y - dy[i]);\r\n      if(0 <= xx && xx < Setting.LENGTH && 0 <= yy && yy < Setting.LENGTH){\r\n        ++control_pos[xx][yy];\r\n        // 王手をしているか\r\n        if(xx === kingx && yy === kingy){\r\n          control_pos[Setting.LENGTH][0] = x * Setting.LENGTH + y;\r\n          control_pos[Setting.LENGTH][1] = num;\r\n        }\r\n      }\r\n    }\r\n    return;\r\n  }\r\n  // 香\r\n  if(num === 5){\r\n    let dy: number = -1;\r\n    let yy = (turn ? y + dy : y - dy);\r\n    while(0 <= yy && yy < Setting.LENGTH){\r\n      ++control_pos[x][yy];\r\n      // 王手をしているか\r\n      if(x === kingx && yy === kingy){\r\n        control_pos[Setting.LENGTH][0] = x * Setting.LENGTH + y;\r\n        control_pos[Setting.LENGTH][1] = num;\r\n      }\r\n      // 空きマスでなければ終わり\r\n      // ただし相手玉なら終わらない\r\n      if(pos[x][yy].piece_num() !== Setting.MT && !(pos[x][yy].piece_num() === 7 && pos[x][yy].turn() !== turn)){\r\n        break;\r\n      }\r\n      yy = (turn ? yy + dy : yy - dy);\r\n    }\r\n    return;\r\n  }\r\n  // 飛と角は手番で動きが変わらない！（対称）\r\n  // 角\r\n  if(num === 1 || num === 9){\r\n    let dx: number[] = new Array<number>(-1, 1, 1, -1);\r\n    let dy: number[] = new Array<number>(-1, -1, 1, 1);\r\n    for(let i = 0; i < dx.length; ++i){\r\n      let xx = x + dx[i];\r\n      let yy = y + dy[i];\r\n      while(0 <= xx && xx < Setting.LENGTH && 0 <= yy && yy < Setting.LENGTH){\r\n        ++control_pos[xx][yy];\r\n        // 王手をしているか\r\n        if(xx === kingx && yy === kingy){\r\n          control_pos[Setting.LENGTH][0] = x * Setting.LENGTH + y;\r\n          control_pos[Setting.LENGTH][1] = num;\r\n        }\r\n        // 空きマスでなければ終わり\r\n        // ただし相手玉なら終わらない\r\n        if(pos[xx][yy].piece_num() !== Setting.MT && !(pos[xx][yy].piece_num() === 7 && pos[xx][yy].turn() !== turn)){\r\n          break;\r\n        }\r\n        xx += dx[i];\r\n        yy += dy[i];\r\n      }\r\n    }\r\n    // 馬の場合は上下左右も\r\n    if(num === 9){\r\n      dx = new Array<number>(0, 1, 0, -1);\r\n      dy = new Array<number>(-1, 0, 1, 0);\r\n      for(let i = 0; i< dx.length; ++i){\r\n        let xx = x + dx[i];\r\n        let yy = y + dy[i];\r\n        if(0 <= xx && xx < Setting.LENGTH && 0 <= yy && yy < Setting.LENGTH){\r\n          ++control_pos[xx][yy];\r\n          // 王手をしているか\r\n          if(xx === kingx && yy === kingy){\r\n            control_pos[Setting.LENGTH][0] = x * Setting.LENGTH + y;\r\n            control_pos[Setting.LENGTH][1] = num;\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return;\r\n  }\r\n  // 飛\r\n  if(num === 0 || num === 8){\r\n    let dx: number[] = new Array<number>(0, 1, 0, -1);\r\n    let dy: number[] = new Array<number>(-1, 0, 1, 0);\r\n    for(let i = 0; i < dx.length; ++i){\r\n      let xx = x + dx[i];\r\n      let yy = y + dy[i];\r\n      while(0 <= xx && xx < Setting.LENGTH && 0 <= yy && yy < Setting.LENGTH){\r\n        ++control_pos[xx][yy];\r\n        // 王手をしているか\r\n        if(xx === kingx && yy === kingy){\r\n          control_pos[Setting.LENGTH][0] = x * Setting.LENGTH + y;\r\n          control_pos[Setting.LENGTH][1] = num;\r\n        }\r\n        // 空きマスでなければ終わり\r\n        // ただし相手玉なら終わらない\r\n        if(pos[xx][yy].piece_num() !== Setting.MT && !(pos[xx][yy].piece_num() === 7 && pos[xx][yy].turn() !== turn)){\r\n          break;\r\n        }\r\n        xx += dx[i];\r\n        yy += dy[i];\r\n      }\r\n    }\r\n    // 竜の場合は斜めも\r\n    if(num === 8){\r\n      dx = new Array<number>(-1, 1, 1, -1);\r\n      dy = new Array<number>(-1, -1, 1, 1);\r\n      for(let i = 0; i< dx.length; ++i){\r\n        let xx = x + dx[i];\r\n        let yy = y + dy[i];\r\n        if(0 <= xx && xx < Setting.LENGTH && 0 <= yy && yy < Setting.LENGTH){\r\n          ++control_pos[xx][yy];\r\n          // 王手をしているか\r\n          if(xx === kingx && yy === kingy){\r\n            control_pos[Setting.LENGTH][0] = x * Setting.LENGTH + y;\r\n            control_pos[Setting.LENGTH][1] = num;\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return;\r\n  }\r\n}\r\n\r\n// 駒の利きを列挙\r\n// 一つの駒を指定することもできる\r\n// ついでに王手をかけている駒の位置も返す\r\nfunction control_pos(pos: Piece[][], turn: boolean, x: number = -1, y: number = -1, kingx: number = -1, kingy: number = -1, check_king: boolean = true): number[][]{\r\n  let control_pos: number[][] = [];\r\n  for(let i = 0; i < Setting.LENGTH + 1; ++i){\r\n    control_pos[i] = new Array<number>(Setting.LENGTH).fill(0);\r\n  }\r\n  if(x !== -1){\r\n    control_pos_sub(control_pos, pos, turn, x, y);\r\n    return control_pos;\r\n  }\r\n  for(let i = 0; i < Setting.LENGTH; ++i){\r\n    for(let j = 0; j < Setting.LENGTH; ++j){\r\n      if(pos[i][j].piece_num() !== Setting.MT && pos[i][j].turn() === turn){\r\n        control_pos_sub(control_pos, pos, turn, i, j, kingx, kingy, check_king);\r\n      }\r\n    }\r\n  }\r\n  return control_pos;\r\n}\r\n\r\n// 王手がかかっているか\r\n// 返り値：（1桁目：王手をかけている駒の数、2桁目：そのうち防げる駒の数）\r\nfunction check(pos: Piece[][], captured: number[], turn: boolean, x: number = -1, y : number = -1): number{\r\n  // 玉の位置\r\n  if(x === -1){\r\n    for(let i = 0; i < Setting.LENGTH; ++i){\r\n      for(let j = 0; j < Setting.LENGTH; ++j){\r\n        if(pos[i][j].piece_num() === 7 && pos[i][j].turn() === turn){\r\n          x = i;\r\n          y = j;\r\n          i = Setting.LENGTH;\r\n          j = Setting.LENGTH;\r\n          break;\r\n        }\r\n      }\r\n    }\r\n  }\r\n  // 効いているマスをあらかじめ求めておく\r\n  let def_controls: number[][] = control_pos(pos, turn, -1, -1, -1, -1, false);\r\n  let atc_controls: number[][] = control_pos(pos, !turn, -1, -1, x, y);\r\n  // 王手をかけている駒の数\r\n  let cnt: number = atc_controls[x][y];\r\n  if(cnt === 0){\r\n    return 0;\r\n  }\r\n  // 2つ以上の駒が王手をかけているなら逃げるしかないのでreturn\r\n  if(cnt > 1){\r\n    return cnt * 10;\r\n  }\r\n  // 王手をかけている駒を（玉以外で）取れるか\r\n  // 玉で取れる場合はここではチェックしなくてよい\r\n  let atc: number = atc_controls[Setting.LENGTH][0];\r\n  let atcx: number = Math.floor(atc / Setting.LENGTH);\r\n  let atcy: number = atc % Setting.LENGTH;\r\n  // 桂馬以外の飛び道具で王手されているとき合い駒できるか\r\n  let num: number = atc_controls[Setting.LENGTH][1];\r\n  if(num === 0 || num === 1 || num === 5 || num === 8 || num === 9){\r\n    let dx: number = atcx - x;\r\n    let dy: number = atcy - y;\r\n    if(dx !== 0){\r\n      dx /= Math.abs(dx);\r\n    }\r\n    if(dy !== 0){\r\n      dy /= Math.abs(dy);\r\n    }\r\n    let xx: number = x + dx;\r\n    let yy: number = y + dy;\r\n    while(xx !== atcx || yy !== atcy){\r\n      // 移動合いできるか\r\n      if(def_controls[xx][yy] > 0){\r\n        return 11;\r\n      }\r\n      // 持ち駒で合い駒できるか\r\n      for(let i = 0; i < Setting.WHITE; ++i){\r\n        if(captured[i] === 0){\r\n          continue;\r\n        }\r\n        let cur_pos: Piece[][] = _.cloneDeep(pos);\r\n        cur_pos[xx][yy] = set_piece(i, turn);\r\n        if(can_move(pos, cur_pos, captured, -1, -1, x, yy, !turn)){\r\n          // 二歩かどうかはチェックする必要がある\r\n          if(i === 6 && nifu(cur_pos, xx, turn)){\r\n            continue;\r\n          }\r\n          return 11;\r\n        }\r\n      }\r\n      xx += dx;\r\n      yy += dy;\r\n    }\r\n  }\r\n\r\n  return 10;\r\n}\r\n\r\n// 詰んでいるか\r\nfunction mate(pos: Piece[][], captured: number[], turn: boolean): boolean{\r\n  // 玉の位置\r\n  let x: number = -1;\r\n  let y: number = -1;\r\n  for(let i = 0; i < Setting.LENGTH; ++i){\r\n    for(let j = 0; j < Setting.LENGTH; ++j){\r\n      if(pos[i][j].piece_num() === 7 && pos[i][j].turn() === turn){\r\n        x = i;\r\n        y = j;\r\n        i = Setting.LENGTH;\r\n        j = Setting.LENGTH;\r\n        break;\r\n      }\r\n    }\r\n  }\r\n  // 王手をかけている駒の数\r\n  let cnt: number = check(pos, captured, turn, x, y);\r\n  // 王手されていなければ明らかに詰んでいない\r\n  if(cnt === 0){\r\n    return false;\r\n  }\r\n  // 今いるマス及び周りのマスで王手がかかるか\r\n  let atc_controls: number[][] = control_pos(pos, !turn);\r\n  let dx: number[] = new Array<number>(1, 1, 0, -1, -1, -1, 0, 1);\r\n  let dy: number[] = new Array<number>(0, 1, 1, 1, 0, -1, -1, -1);\r\n  for(let i = 0; i < dx.length; ++i){\r\n    let xx = x + dx[i];\r\n    let yy = y + dy[i];\r\n    if(xx < 0 || Setting.LENGTH <= xx || yy < 0 || Setting.LENGTH <= yy){\r\n      continue;\r\n    }\r\n    // 自分の駒があるとダメ\r\n    if(pos[xx][yy].piece_num() !== Setting.MT && pos[xx][yy].turn() === turn){\r\n      continue;\r\n    }\r\n    // 逃げられるマスがあれば詰んでいない\r\n    if(atc_controls[xx][yy] === 0){\r\n      return false;\r\n    }\r\n  }\r\n  // 2つ以上の駒から王手されている場合は明らかにダメ\r\n  if(Math.floor(cnt / 10) > 1){\r\n    return true;\r\n  }\r\n  // 防げる王手か\r\n  return cnt % 10 < 1;\r\n}\r\n\r\n// 動けるマスか\r\n// 動かす前の盤面、動かした後の盤面、移動前の位置、移動後の位置、手番\r\nfunction can_move(bfr_pos: Piece[][], cur_pos: Piece[][], captured: number[], xx: number, yy: number, x: number, y: number, turn: boolean): boolean{\r\n  let num: number = cur_pos[x][y].piece_num();\r\n  // 駒を打つときは行き所がないかと、打ち歩詰めのみをチェックすればよい\r\n  // 二歩のチェックはここではせずに反則負けにする\r\n  if(xx === -1){\r\n    if(num === 4){\r\n      return (turn ? y > 1 : y < Setting.LENGTH - 1 - 1);\r\n    }\r\n    if(num === 5){\r\n      return (turn ? y !== 0 : y !== Setting.LENGTH - 1);\r\n    }\r\n    if(num === 6){\r\n      if((turn ? y === 0 : y === Setting.LENGTH - 1)){\r\n        return false;\r\n      }\r\n      // 打ち歩詰めかどうか\r\n      return !mate(cur_pos, captured, !turn);\r\n    }\r\n    return true;\r\n  }\r\n  // ルール通りの動きか調べる\r\n  // 香、角、飛は駒をすり抜けに注意\r\n  let controls: number[][] = control_pos(bfr_pos, turn, xx, yy);\r\n  return controls[x][y] > 0;\r\n}\r\n\r\n// 二歩かどうか\r\n// 打った筋だけ見ればよい\r\nfunction nifu(pos: Piece[][], x: number, turn: boolean): boolean{\r\n  let cnt = 0;\r\n  for(let i = 0; i < Setting.LENGTH; ++i){\r\n    if(pos[x][i].piece_num() === 6 && pos[x][i].turn() === turn){\r\n      ++cnt;\r\n    }\r\n  }\r\n  return cnt >= 2;\r\n}\r\n\r\ninterface IGameProps {\r\n  start_pos: Piece[][];\r\n  start_black_piece: number[];\r\n  start_white_piece: number[];\r\n  current_pos: Piece[][];\r\n  current_black_piece: number[];\r\n  current_white_piece: number[];\r\n  kifu: Array<string>;\r\n  turn: boolean;\r\n  moves: number;\r\n  clicked_piece: number;\r\n  final_piece: number;\r\n}\r\n\r\ninterface IGameState {\r\n  // 開始局面\r\n  start_pos: Piece[][];\r\n  start_black_piece: number[];\r\n  start_white_piece: number[];\r\n  // 現局面\r\n  current_pos: Piece[][];\r\n  current_black_piece: number[];\r\n  current_white_piece: number[];\r\n  // 棋譜\r\n  kifu: Array<string>;\r\n  // 先手番かどうか\r\n  turn: boolean;\r\n  // 手数\r\n  moves: number;\r\n  // 掴んでいる駒\r\n  clicked_piece: number;\r\n  // 最後に動かした駒\r\n  final_piece: number;\r\n}\r\n\r\nexport class Game extends React.Component<IGameProps, IGameState> {\r\n  constructor(props: IGameProps){\r\n    super(props);\r\n    this.state = {\r\n      start_pos: make_board(),\r\n      start_black_piece: set_pieces(),\r\n      start_white_piece: set_pieces(),\r\n      current_pos: make_board(),\r\n      current_black_piece: set_pieces(),\r\n      current_white_piece: set_pieces(),\r\n      kifu: set_kifu(),\r\n      turn: true,\r\n      moves: 0,\r\n      clicked_piece: Setting.UNCLICKED,\r\n      final_piece: Setting.UNCLICKED,\r\n    };\r\n  }\r\n\r\n  handleClick(i: number){\r\n    var clicked_piece: number = this.state.clicked_piece;\r\n    const turn = this.state.turn;\r\n    // 持ち駒をクリックしたとき\r\n    if(i < Setting.WHITE * 2){\r\n      if(clicked_piece === Setting.UNCLICKED){\r\n        if((turn ? i < Setting.WHITE : i>=Setting.WHITE)){\r\n          this.setState({\r\n            clicked_piece: i,\r\n          });\r\n        }\r\n        return;\r\n      }\r\n      this.setState({\r\n        clicked_piece: Setting.UNCLICKED,\r\n      });\r\n      return;\r\n    }\r\n\r\n    // 持ち駒の分を引く\r\n    let x: number = Math.floor((i - Setting.WHITE * 2) / Setting.LENGTH);\r\n    let y: number = (i - Setting.WHITE * 2) % Setting.LENGTH;\r\n    const current_pos = this.state.current_pos.concat();\r\n    // 駒を掴んでないとき\r\n    if(this.state.clicked_piece === Setting.UNCLICKED){\r\n      // 手番の駒以外はダメ\r\n      if(current_pos[x][y].piece_num() === Setting.MT || current_pos[x][y].turn() !== turn){\r\n        return;\r\n      }\r\n      this.setState({\r\n        clicked_piece: i,\r\n      });\r\n      return;\r\n    }\r\n\r\n    // 手番の駒はダメ\r\n    // ここでは必ず盤面をクリックしている\r\n    if(current_pos[x][y].piece_num() !== Setting.MT && current_pos[x][y].turn() === turn){\r\n      this.setState({\r\n        clicked_piece: Setting.UNCLICKED,\r\n      });\r\n      return;\r\n    }\r\n\r\n    // 以下では敵の駒か空きマスをクリックしている\r\n    const current_black_piece = _.cloneDeep(this.state.current_black_piece);\r\n    const current_white_piece = _.cloneDeep(this.state.current_white_piece);\r\n    const moves = this.state.moves;\r\n    var tmp_pos = _.cloneDeep(current_pos);  // 動かした後の盤面\r\n    var tmp_black_piece = _.cloneDeep(current_black_piece);\r\n    var tmp_white_piece = _.cloneDeep(current_white_piece);\r\n    var xx: number = -1;\r\n    var yy: number = -1;\r\n    // 持ち駒を掴んでいるとき\r\n    if(clicked_piece < Setting.WHITE * 2){\r\n      // 空きマスでないとダメ\r\n      if(current_pos[x][y].piece_num() !== Setting.MT){\r\n        this.setState({\r\n          clicked_piece: Setting.UNCLICKED,\r\n        });\r\n        return;\r\n      }\r\n      // 先手の駒を掴んでいる場合\r\n      // 掴むときに手番かチェックしているので、ここではチェックしなくてよい\r\n      if(turn){\r\n        // 持ち駒の更新\r\n        --tmp_black_piece[clicked_piece];\r\n         // 盤面の更新\r\n        tmp_pos[x][y] = set_piece(clicked_piece, turn);\r\n      }\r\n      else{\r\n        // 持ち駒の更新\r\n        --tmp_white_piece[clicked_piece - Setting.WHITE];\r\n         // 盤面の更新\r\n        tmp_pos[x][y] = set_piece(clicked_piece - Setting.WHITE, turn);\r\n      }\r\n    }\r\n    else{\r\n      // 持ち駒の分を引く\r\n      xx = Math.floor((clicked_piece - Setting.WHITE * 2) / Setting.LENGTH);\r\n      yy = (clicked_piece- Setting.WHITE * 2) % Setting.LENGTH;\r\n      var piece = tmp_pos[x][y];\r\n      // 盤面の更新\r\n      tmp_pos[x][y] = tmp_pos[xx][yy];\r\n      tmp_pos[xx][yy] = new Mt();\r\n      // 持ち駒の更新\r\n      let num: number = piece.piece_num();\r\n      if(num !== Setting.MT){\r\n        // 成っている駒を生に戻す\r\n        if(num > Setting.WHITE){\r\n          num -= Setting.MT / 2;\r\n        }\r\n        turn ? ++tmp_black_piece[num] : ++tmp_white_piece[num];\r\n      }\r\n    }\r\n\r\n    // 合法手か（動けるところか、王手がかからないか）\r\n    // 移動した駒は成っていないので行き所がないこともあるが、行き所がないか駒を打つときのみチェックする\r\n    // これは適切な移動ならば行き所のない駒はできないため\r\n    if(!can_move(current_pos, tmp_pos, (turn ? tmp_white_piece : tmp_black_piece), xx, yy, x, y, turn) || check(tmp_pos, (turn ? tmp_black_piece : tmp_white_piece), turn) !== 0){\r\n      this.setState({\r\n        clicked_piece: Setting.UNCLICKED,\r\n      });\r\n      return;\r\n    }\r\n    // 成れるときは聞く\r\n    // 条件：盤面から3段目に移動または3段目から移動するときで、金と玉以外の成っていない駒のとき\r\n    let num: number = tmp_pos[x][y].piece_num();\r\n    if(xx !== -1 && (turn ? (y < 3 || yy < 3) : (y > Setting.LENGTH - 1 - 3 || yy > Setting.LENGTH - 1 - 3)) && num < Setting.WHITE && Setting.PIECES[num + Setting.MT / 2] !== \"\"){\r\n      let is_promoted: Boolean = false;\r\n      // 必ず成るときは聞かずに成る\r\n      // 歩、香の1段目、桂の1,2段目\r\n      if(5 <= num && num <= 6){\r\n        if((turn ? y === 0 : y === Setting.LENGTH - 1)){\r\n          tmp_pos[x][y].promote();\r\n          is_promoted = true;\r\n        }\r\n      }\r\n      else if(num === 4){\r\n        if((turn ? y < 2 : y > Setting.LENGTH -1 - 2)){\r\n          tmp_pos[x][y].promote();\r\n          is_promoted = true;\r\n        }\r\n      }\r\n      if(!is_promoted){\r\n        if(window.confirm(\"成りますか？\")) {\r\n          tmp_pos[x][y].promote();\r\n        }\r\n      }\r\n    }\r\n    this.setState({\r\n      current_pos: tmp_pos,\r\n      current_black_piece: tmp_black_piece,\r\n      current_white_piece: tmp_white_piece,\r\n      turn: !turn,\r\n      moves: moves + 1,\r\n      clicked_piece: Setting.UNCLICKED,\r\n      final_piece: i,\r\n    });\r\n    // 二歩は負け\r\n    if(xx === -1 && tmp_pos[x][y].piece_num() === 6){\r\n      if(nifu(tmp_pos, x, turn)){\r\n        setTimeout(() => {\r\n          alert(\"反則（二歩）により\" + moves + \"手にて\" + (turn ? \"後手\" : \"先手\") + \"の勝ちです！\")\r\n        }, 200);\r\n        return;\r\n      }\r\n    }\r\n    // 詰んでいたら対局終了\r\n    if(mate(tmp_pos, (turn ? tmp_white_piece : tmp_black_piece), !turn)){\r\n      setTimeout(() => {\r\n        alert(\"まで\" + (moves + 1) + \"手にて\" + (turn ? \"先手\": \"後手\") + \"の勝ちです！\")\r\n      }, 200);\r\n      return;\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const current_pos = this.state.current_pos;\r\n    return (\r\n      <div className=\"game\">\r\n        <div className=\"game-info-white white\">\r\n          <div>{\"△\"}</div>\r\n          <Captured\r\n            squares={this.state.current_white_piece}\r\n            clicked_piece={this.state.clicked_piece}\r\n            is_black={false}\r\n            turn={this.state.turn}\r\n            onClick={i => this.handleClick(i)}\r\n          />\r\n        </div>\r\n        <div className=\"game-board\">\r\n          <Board\r\n            squares={current_pos}\r\n            onClick={i => this.handleClick(i)}\r\n            clicked_piece={this.state.clicked_piece}\r\n            final_piece={this.state.final_piece}\r\n          />\r\n        </div>\r\n        <div className=\"game-info-black\">\r\n          <div>{\"▲\"}</div>\r\n          <Captured\r\n            squares={this.state.current_black_piece}\r\n            clicked_piece={this.state.clicked_piece}\r\n            is_black={true}\r\n            turn={this.state.turn}\r\n            onClick={i => this.handleClick(i)}\r\n          />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport {Setting} from \"./setting\";\r\nimport {Game, make_board, set_kifu, set_pieces} from './game';\r\n// import { Piece } from './pieces/piece';\r\n\r\nReactDOM.render(\r\n  <Game\r\n    start_pos={make_board()}\r\n    start_black_piece={set_pieces()}\r\n    start_white_piece={set_pieces()}\r\n    current_pos={make_board()}\r\n    current_black_piece={set_pieces()}\r\n    current_white_piece={set_pieces()}\r\n    kifu={set_kifu()}\r\n    turn={true}\r\n    moves={0}\r\n    clicked_piece={Setting.UNCLICKED}\r\n    final_piece={Setting.UNCLICKED}\r\n  />,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}